function main()
    // conv2d parameters
    var input_channels  = 1u64;
    var output_channels = 1u64;
    var input_height    = 9u64;
    var input_width     = 9u64;
    var kernel_size     = 3u64;
    var output_height   = 3u64;
    var output_width    = 3u64;
    var stride_size     = 1u64;

     var model = Model("sequential");
     model.add("conv2d", output_channels, input_channels, kernel_size, stride_size);
//     model.add("flatten");
//     model.add("dense", input_channels*(input_height-2u64)*(input_width-2u64),  input_channels*(input_height-2u64)*(input_width-2u64));
//     model.add("dense", input_channels*(input_height-2u64)*(input_width-2u64), 31u64, "relu");
//     model.add("dropout", 1.0fp64);
//     model.add("activation", "sigmoid");
//     model.add("dense", 31u64, 10u64, "relu");
//     model.add("dropout", 1.0fp64);
//     model.add("activation", "relu");
    // model.add("activation", "sigmoid");
  //   model.add("activation", "relu");
//     model.add("dropout", 1.0fp64);
     model.compile("mse", "sgd");

     var shape = Array<UInt64>(4);
     shape[0] = input_channels;
     shape[1] = input_height;
     shape[2] = input_width;
     shape[3] = 1u64;
     var x = Tensor(shape);
     
     var shape2 = Array<UInt64>(4);
     shape2[0] = input_channels;
     shape2[1] = input_height*2u64;
     shape2[2] = input_width*2u64;
     shape2[3] = 10u64;
     var y = Tensor(shape2);
     
     var shape3 = Array<UInt64>(4);
     shape3[0] = input_channels;
     shape3[1] = 3u64;
     shape3[2] = 6u64;
     shape3[3] = 100u64;
     var z = Tensor(shape3);

     //x.fromString("-1000.0, -10.0, -1.0, -0.1, -0.0001; 0.0, 0.0001, 0.1, 1.0, 1000.0;");

     var a = model.predict(x);
     printLn(a.shape());
     var a2 = model.predict(y);
     printLn(a2.shape());
     var a3 = model.predict(z);
     printLn(a3.shape());

     //printLn(activated.toString());
 endfunction
