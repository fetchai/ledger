function main()
    var data_shape = Array<UInt64>(2);
    data_shape[0] = 20u64;
    data_shape[1] = 4000u64;

    var label_shape = Array<UInt64>(2);
    label_shape[0] = 1u64;
    label_shape[1] = 4000u64;

    var data_tensor = Tensor(data_shape);
    var label_tensor = Tensor(label_shape);

    data_tensor.fillRandom();
    label_tensor.fillRandom();

    var dataloader = DataLoader("tensor");
    dataloader.addData({data_tensor}, label_tensor);

    var graph = Graph();
    graph.addPlaceholder("Input");
    graph.addPlaceholder("Label");
    graph.addFullyConnected("Output", "Input", 20, 1);
    graph.addMeanSquareErrorLoss("Error", "Output", "Label");

    var batch_size = 8u64;

    // test that every optimiser can be constructed and that running reduces loss

    var optimiser1 = Optimiser("adagrad", graph, dataloader, {"Input"}, "Label", "Error");
    var loss = optimiser1.run(batch_size);

    var optimiser2 = Optimiser("adam", graph, dataloader, {"Input"}, "Label", "Error");
    var loss2 = optimiser2.run(batch_size);
    assert(loss2 < loss);

    var optimiser3 = Optimiser("momentum", graph, dataloader, {"Input"}, "Label", "Error");
    loss = optimiser3.run(batch_size);
    assert(loss < loss2);

    var optimiser4 = Optimiser("rmsprop", graph, dataloader, {"Input"}, "Label", "Error");
    loss2 = optimiser4.run(batch_size);
    assert(loss2 < loss);

    var optimiser5 = Optimiser("sgd", graph, dataloader, {"Input"}, "Label", "Error");
    loss = optimiser5.run(batch_size);
    assert(loss < loss2);

    loss2 = optimiser1.run(batch_size);
    assert(loss2 < loss);


    optimiser1.setGraph(graph);

endfunction
