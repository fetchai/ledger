#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import csv
import subprocess

# csv file generated by vm_benchmarks
vm_benchmark_path = '../../cmake-build-release/libs/vm/benchmark/'
vm_benchmark_file = 'vm_benchmark.csv'
num_reps = 10

stdout = subprocess.call([vm_benchmark_path + 'vm-benchmarks',
                '--benchmark_out=' + vm_benchmark_file,
                '--benchmark_out_format=csv',
                '--benchmark_repetitions=' + str(num_reps),
                '--benchmark_report_aggregates_only=true',
                '--benchmark_display_aggregates_only=true'])

rows = []

# read results in text format
with open(vm_benchmark_file) as csvfile:
  csvreader = csv.reader(csvfile)
  rows = [row for row in csvreader if 'AddInstruction' in row[0]]  
     
# parse entry labels
labels = [row[0] for row in rows]
benchmarks = [label.split('_',1) for label in labels] 
      
benchmark_names = [bm[0] for (ind,bm) in enumerate(benchmarks) if ind % 3 == 0]
num_benchmarks = len(benchmark_names)

# cpu time stats (in ns) 
means = [float(row[3]) for row in rows if 'mean' in row[0]]
medians = [float(row[3]) for row in rows if 'median' in row[0]]
stddevs = [float(row[3]) for row in rows if 'stddev' in row[0]]
        
# subtract baseline times to estimate opcode times 
mean_add_obj = means[1] - means[0]
mean_add_u32 = means[3] - means[2]
mean_sub_u32 = means[4] - means[2]
mean_mul_u32 = means[5] - means[2]
mean_div_u32 = means[6] - means[2]
   
# error propagation (standard error in the mean)
stderr_add_obj = (stddevs[1]**2 + stddevs[0]**2)**0.5/num_reps**0.5
stderr_add_u32 = (stddevs[3]**2 + stddevs[2]**2)**0.5/num_reps**0.5
stderr_sub_u32 = (stddevs[4]**2 + stddevs[2]**2)**0.5/num_reps**0.5
stderr_mul_u32 = (stddevs[5]**2 + stddevs[2]**2)**0.5/num_reps**0.5
stderr_div_u32 = (stddevs[6]**2 + stddevs[2]**2)**0.5/num_reps**0.5

# print stats
print('\nAdd string: {:0.2f} +/- {:0.2f} ns'.format(mean_add_obj,stderr_add_obj))
print('Add uint32: {:0.2f} +/- {:0.2f} ns'.format(mean_add_u32,stderr_add_u32))
print('Subtract uint32: {:0.2f} +/- {:0.2f} ns'.format(mean_sub_u32,stderr_sub_u32))
print('Multiply uint32: {:0.2f} +/- {:0.2f} ns'.format(mean_mul_u32,stderr_mul_u32))
print('Divide uint32: {:0.2f} +/- {:0.2f} ns'.format(mean_div_u32,stderr_div_u32))