// Easy
( )  Tensor(Tensor &&t) = default;
( )  Tensor &operator=(Tensor &&) = default;
( )  TensorIterator<T, SizeType> begin() const
( )  TensorIterator<T, SizeType> end() const

// Mapping 
( )  SizeVector  IndicesOfElement(SizeType element) // INTERNAL FOR MAPPING
( )  T &At(SizeType i)                              // RENAME AND USE INTERNAL
( )  T const &At(SizeType i) const
( )  T const &At(SizeVector  const &indices) const  // Rename
( )  void Set(SizeType i, T value)                  // USE INTERNAL
( )  T &At(SizeVector  const &indices)              // RENAME
( )  T &operator[](SizeType i)                      // USE AT
( )  T const &operator[](SizeType i) const


// NEW FUNCTIONALITY
( )  SelfType Clone()                               // ESSENTIALLY COPY
( )  Tensor<T> Slice(SizeType i) const
( )  Tensor<T> &Unsqueeze()
( )  Tensor<T> Transpose() const



(v)  Tensor(SizeType size)
(v)  Tensor(Tensor const &t)     = default;
(v)  Tensor &operator=(Tensor const &other) = default;
(v)  void Copy(SelfType const &other)
(v)  SizeVector  const &shape()
(v)  SizeType Capacity()
(v)  SizeType size()
(v)  SizeType OffsetOfElement(SizeVector  const &indices)
(v)  void Fill(T const &value)
(v)  T const &operator()(SizeVector  const &indices) const
(v)  void Set(SizeVector  const &indices, T value)
(v)  bool AllClose(Tensor<T> const &o, T const &relative_tolerance = T(1e-5), T const &absolute_tolerance = T(1e-8)) const

(v)  Tensor<T> &InlineAdd(T const &o)
(v)  Tensor<T> &InlineAdd(Tensor<T> const &o)
(v)  Tensor<T> &InlineSubtract(T const &o)
(v)  Tensor<T> &InlineSubtract(Tensor<T> const &o)
(v)  Tensor<T> &InlineReverseSubtract(Tensor<T> const &o)

(v)  Tensor<T> &InlineMultiply(T const &o)
(v)  Tensor<T> &InlineMultiply(Tensor<T> const &o)
(v)  Tensor<T> &InlineDivide(T const &o)
(v)  Tensor<T> &InlineDivide(Tensor<T> const &o)
(v)  T Sum() const
  
(v)  bool operator==(Tensor const &other) const
(v)  bool operator!=(Tensor const &other) const
(v)  SharedArray data() { return storage_.data(); }
(v)  SharedArray const& data() const { return storage_.data(); }  
 