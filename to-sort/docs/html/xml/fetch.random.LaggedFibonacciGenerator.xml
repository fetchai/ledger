<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fetch::random::LaggedFibonacciGenerator" name="LaggedFibonacciGenerator" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatenontypeparameter id="fetch::random::LaggedFibonacciGenerator::P" name="P">
    <type name="size_t" />
  </templatenontypeparameter>
  <templatenontypeparameter id="fetch::random::LaggedFibonacciGenerator::Q" name="Q">
    <type name="size_t" />
  </templatenontypeparameter>
  <typedef id="fetch::random::LaggedFibonacciGenerator::random_type" name="random_type">
    <type name="uint64_t" />
  </typedef>
  <constructor id="fetch::random::LaggedFibonacciGenerator::LaggedFibonacciGenerator&lt;P, Q&gt;" name="LaggedFibonacciGenerator&lt;P, Q&gt;" />
  <method id="fetch::random::LaggedFibonacciGenerator::Seed" name="Seed">
    <return>
      <type name="LaggedFibonacciGenerator&lt;P, Q&gt;::random_type" ref="fetch::random::LaggedFibonacciGenerator#fetch::random::LaggedFibonacciGenerator::random_type" />
    </return>
  </method>
  <method id="fetch::random::LaggedFibonacciGenerator::Seed" name="Seed">
    <return>
      <type name="LaggedFibonacciGenerator&lt;P, Q&gt;::random_type" ref="fetch::random::LaggedFibonacciGenerator#fetch::random::LaggedFibonacciGenerator::random_type" />
    </return>
    <argument id="fetch::random::LaggedFibonacciGenerator::Seed::s" name="s">
      <type name="LaggedFibonacciGenerator&lt;P, Q&gt;::random_type" qualifier=" const &amp;" ref="fetch::random::LaggedFibonacciGenerator#fetch::random::LaggedFibonacciGenerator::random_type" />
    </argument>
  </method>
  <method id="fetch::random::LaggedFibonacciGenerator::Reset" name="Reset">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::random::LaggedFibonacciGenerator::operator()" name="operator()">
    <return>
      <type name="LaggedFibonacciGenerator&lt;P, Q&gt;::random_type" ref="fetch::random::LaggedFibonacciGenerator#fetch::random::LaggedFibonacciGenerator::random_type" />
    </return>
  </method>
  <method id="fetch::random::LaggedFibonacciGenerator::AsDouble" name="AsDouble">
    <return>
      <type builtin="yes" name="double" />
    </return>
  </method>
</classtemplate>
