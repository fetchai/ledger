<?xml version='1.0' encoding='utf-8'?>
<class id="fetch::script::AbstractSyntaxTree" name="AbstractSyntaxTree" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <typedef id="fetch::script::AbstractSyntaxTree::ast_node_ptr" name="ast_node_ptr">
    <type name="std::__1::shared_ptr&lt;fetch::script::ASTNode&gt;" />
  </typedef>
  <typedef id="fetch::script::AbstractSyntaxTree::byte_array_type" name="byte_array_type">
    <brief>typedef ASTToken token_type;</brief>
    <type name="byte_array::Token" />
  </typedef>
  <typedef id="fetch::script::AbstractSyntaxTree::node_type" name="node_type">
    <type name="ASTNode" ref="fetch::script::ASTNode#fetch::script::ASTNode" />
  </typedef>
  <destructor id="fetch::script::AbstractSyntaxTree::~AbstractSyntaxTree" name="~AbstractSyntaxTree" />
  <method id="fetch::script::AbstractSyntaxTree::AddGroup" name="AddGroup">
    <return>
      <type name="ASTGroupOperationType" ref="fetch::script::ASTGroupOperationType#fetch::script::ASTGroupOperationType" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::AddGroup::type" name="type">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::script::AbstractSyntaxTree::AddGroup::next" name="next">
      <type name="uint16_t" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::AddLeft" name="AddLeft">
    <return>
      <type name="ASTOperationType" ref="fetch::script::ASTOperationType#fetch::script::ASTOperationType" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::AddLeft::type" name="type">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::script::AbstractSyntaxTree::AddLeft::next" name="next">
      <type name="uint16_t" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::AddLeftRight" name="AddLeftRight">
    <return>
      <type name="ASTOperationType" ref="fetch::script::ASTOperationType#fetch::script::ASTOperationType" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::AddLeftRight::type" name="type">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::script::AbstractSyntaxTree::AddLeftRight::next" name="next">
      <type name="uint16_t" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::AddOperation" name="AddOperation">
    <return>
      <type name="ASTOperationType" ref="fetch::script::ASTOperationType#fetch::script::ASTOperationType" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::AddOperation::type" name="type">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::script::AbstractSyntaxTree::AddOperation::properties" name="properties">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::script::AbstractSyntaxTree::AddOperation::next" name="next">
      <type name="uint16_t" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::AddRight" name="AddRight">
    <return>
      <type name="ASTOperationType" ref="fetch::script::ASTOperationType#fetch::script::ASTOperationType" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::AddRight::type" name="type">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::script::AbstractSyntaxTree::AddRight::next" name="next">
      <type name="uint16_t" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::AddToken" name="AddToken">
    <return>
      <type name="ASTOperationType" ref="fetch::script::ASTOperationType#fetch::script::ASTOperationType" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::AddToken::type" name="type">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::script::AbstractSyntaxTree::AddToken::next" name="next">
      <type name="uint16_t" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::Build" name="Build">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::Clear" name="Clear">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::Push" name="Push">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::Push::op" name="op">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::script::AbstractSyntaxTree::Push::t" name="t">
      <type name="byte_array_type" qualifier=" const &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree::byte_array_type" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::PushClose" name="PushClose">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::PushClose::op" name="op">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::script::AbstractSyntaxTree::PushClose::t" name="t">
      <type name="byte_array_type" qualifier=" const &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree::byte_array_type" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::PushOpen" name="PushOpen">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::PushOpen::op" name="op">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::script::AbstractSyntaxTree::PushOpen::t" name="t">
      <type name="byte_array_type" qualifier=" const &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree::byte_array_type" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::PushToken" name="PushToken">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::PushToken::v" name="v">
      <type name="node_type" qualifier=" const &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree::node_type" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::PushTokenType" name="PushTokenType">
    <brief>typedef std::function&amp;lt; bool(byte\_array\_type const &amp;, std::size\_t &amp;) &amp;gt;</brief>
    <doc>function_type;</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::script::AbstractSyntaxTree::PushTokenType::type" name="type">
      <type name="ASTOperationType" qualifier=" const &amp;" ref="fetch::script::ASTOperationType#fetch::script::ASTOperationType" />
    </argument>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::root" name="root">
    <return>
      <type name="node_type" qualifier=" const &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree::node_type" />
    </return>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::root" name="root">
    <return>
      <type name="node_type" qualifier=" &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree::node_type" />
    </return>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::root_shared_pointer" name="root_shared_pointer">
    <return>
      <type name="ast_node_ptr" qualifier=" const &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree::ast_node_ptr" />
    </return>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::root_shared_pointer" name="root_shared_pointer">
    <return>
      <type name="ast_node_ptr" qualifier=" &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree::ast_node_ptr" />
    </return>
  </method>
  <method id="fetch::script::AbstractSyntaxTree::tree" name="tree">
    <return>
      <type name="std::__1::vector&lt;std::__1::shared_ptr&lt;fetch::script::ASTNode&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;fetch::script::ASTNode&gt; &gt; &gt;" qualifier=" const &amp;" />
    </return>
  </method>
</class>
