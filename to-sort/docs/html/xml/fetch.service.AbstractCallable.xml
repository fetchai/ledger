<?xml version='1.0' encoding='utf-8'?>
<class abstract="true" id="fetch::service::AbstractCallable" name="AbstractCallable" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Abstract class for callables.</brief>
  <doc>This class defines but a single virtual operator.
</doc>
  <subclass access="public" name="Function" ref="fetch::service::Function#fetch::service::Function">
    <brief>No function args, void return</brief>
  </subclass>
  <constructor id="fetch::service::AbstractCallable::AbstractCallable" name="AbstractCallable">
    <argument id="fetch::service::AbstractCallable::AbstractCallable::meta_data" name="meta_data">
      <type name="uint64_t" />
    </argument>
  </constructor>
  <destructor id="fetch::service::AbstractCallable::~AbstractCallable" name="~AbstractCallable" virtual="yes" />
  <method id="fetch::service::AbstractCallable::meta_data" name="meta_data">
    <return>
      <type name="uint64_t" qualifier=" const &amp;" />
    </return>
  </method>
  <method abstract="yes" id="fetch::service::AbstractCallable::operator()" name="operator()" virtual="yes">
    <brief> Call operator that impolements deserialization and invocation of function.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::AbstractCallable::operator()::result" name="result">
      <doc>is a serializer used to serialize the result.</doc>
      <type name="serializer_type" qualifier=" &amp;" ref="fetch::service#fetch::service::serializer_type" />
    </argument>
    <argument id="fetch::service::AbstractCallable::operator()::params" name="params">
      <doc>is a serializer that is used to deserialize the arguments.</doc>
      <type name="serializer_type" qualifier=" &amp;" ref="fetch::service#fetch::service::serializer_type" />
    </argument>
  </method>
</class>
