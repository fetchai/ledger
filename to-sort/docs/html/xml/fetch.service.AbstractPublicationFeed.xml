<?xml version='1.0' encoding='utf-8'?>
<class abstract="true" id="fetch::service::AbstractPublicationFeed" name="AbstractPublicationFeed" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Super class for publishers.</brief>
  <doc>This class is the super class abstraction for the publisher
classes. It defines the core functionality for integrating with the
rest of the service framework. A subclass of this class can then
define how to manage feed registrations and how to publish for a
given feed.
</doc>
  <subclass access="public" name="HasPublicationFeed" ref="fetch::service::HasPublicationFeed#fetch::service::HasPublicationFeed">
    <brief> Publication functionality for a single feed.</brief>
  </subclass>
  <methodtemplate id="fetch::service::AbstractPublicationFeed::create_publisher" name="create_publisher">
    <brief> Creates publication function.</brief>
    <doc>This method can be invoked when defining the protocol to attach
member functions as publisher.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::AbstractPublicationFeed::create_publisher::feed" name="feed">
      <doc>is the feed handler.</doc>
      <type name="feed_handler_type" ref="fetch::service#fetch::service::feed_handler_type" />
    </argument>
    <argument id="fetch::service::AbstractPublicationFeed::create_publisher::cls" name="cls">
      <type name="C" qualifier="*" />
    </argument>
    <argument id="fetch::service::AbstractPublicationFeed::create_publisher::function" name="function">
      <doc>a void function that takes a byte array argument.</doc>
      <type name="void (C::*)(const fetch::byte_array::ConstByteArray &amp;)" />
    </argument>
    <templatetypeparameter id="fetch::service::AbstractPublicationFeed::create_publisher::C" name="C" />
  </methodtemplate>
  <typedef id="fetch::service::AbstractPublicationFeed::function_type" name="function_type">
    <brief> The function signature used for </brief>
    <doc>The reason to use std::function here instead of function pointers
is to ensure support for lambda functions with capture and
subsequently member functions from classes with (to this
implementation) unknown base class.
</doc>
    <type name="std::__1::function&lt;void (fetch::byte_array::ConstByteArray)&gt;" />
  </typedef>
  <destructor id="fetch::service::AbstractPublicationFeed::~AbstractPublicationFeed" name="~AbstractPublicationFeed" virtual="yes" />
  <method abstract="yes" id="fetch::service::AbstractPublicationFeed::create_publisher" name="create_publisher" virtual="yes">
    <brief> Creates publication function.</brief>
    <doc>This method can be invoked when defining the protocol using either
lambda or free functions.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::AbstractPublicationFeed::create_publisher::feed" name="feed">
      <doc>is the feed handler.</doc>
      <type name="feed_handler_type" ref="fetch::service#fetch::service::feed_handler_type" />
    </argument>
    <argument id="fetch::service::AbstractPublicationFeed::create_publisher::function" name="function">
      <doc>a void function that takes a byte array argument.</doc>
      <type name="function_type" ref="fetch::service::AbstractPublicationFeed#fetch::service::AbstractPublicationFeed::function_type" />
    </argument>
  </method>
</class>
