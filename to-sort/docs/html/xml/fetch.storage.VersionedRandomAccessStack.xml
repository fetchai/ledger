<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fetch::storage::VersionedRandomAccessStack" name="VersionedRandomAccessStack" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <base access="private">
    <type name="" />
  </base>
  <templatetypeparameter id="fetch::storage::VersionedRandomAccessStack::T" name="T" />
  <templatetypeparameter id="fetch::storage::VersionedRandomAccessStack::B" name="B">
    <default>
      <type name="uint64_t" />
    </default>
  </templatetypeparameter>
  <typedef id="fetch::storage::VersionedRandomAccessStack::byte_array_type" name="byte_array_type">
    <type name="typename RandomAccessStack&lt;type-parameter-0-0, unsigned long long&gt;::byte_array_type" />
  </typedef>
  <typedef id="fetch::storage::VersionedRandomAccessStack::type" name="type">
    <type name="typename RandomAccessStack&lt;type-parameter-0-0, unsigned long long&gt;::type" />
  </typedef>
  <typedef id="fetch::storage::VersionedRandomAccessStack::bookmark_type" name="bookmark_type">
    <type name="B" />
  </typedef>
  <method id="fetch::storage::VersionedRandomAccessStack::Load" name="Load">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::VersionedRandomAccessStack::Load::filename" name="filename">
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::byte_array_type" qualifier=" const &amp;" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::byte_array_type" />
    </argument>
    <argument id="fetch::storage::VersionedRandomAccessStack::Load::history" name="history">
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::byte_array_type" qualifier=" const &amp;" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::byte_array_type" />
    </argument>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::New" name="New">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::VersionedRandomAccessStack::New::filename" name="filename">
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::byte_array_type" qualifier=" const &amp;" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::byte_array_type" />
    </argument>
    <argument id="fetch::storage::VersionedRandomAccessStack::New::history" name="history">
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::byte_array_type" qualifier=" const &amp;" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::byte_array_type" />
    </argument>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::Clear" name="Clear">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::Get" name="Get">
    <return>
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::type" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::type" />
    </return>
    <argument id="fetch::storage::VersionedRandomAccessStack::Get::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::Get" name="Get">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::VersionedRandomAccessStack::Get::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::storage::VersionedRandomAccessStack::Get::object" name="object">
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::type" qualifier=" &amp;" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::type" />
    </argument>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::Set" name="Set">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::VersionedRandomAccessStack::Set::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::storage::VersionedRandomAccessStack::Set::object" name="object">
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::type" qualifier=" const &amp;" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::type" />
    </argument>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::Push" name="Push">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::VersionedRandomAccessStack::Push::object" name="object">
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::type" qualifier=" const &amp;" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::type" />
    </argument>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::Pop" name="Pop">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::Top" name="Top">
    <return>
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::type" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::type" />
    </return>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::Swap" name="Swap">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::VersionedRandomAccessStack::Swap::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::storage::VersionedRandomAccessStack::Swap::j" name="j">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::Revert" name="Revert">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::VersionedRandomAccessStack::Revert::b" name="b">
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::bookmark_type" qualifier=" const &amp;" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::bookmark_type" />
    </argument>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::Commit" name="Commit">
    <return>
      <type name="VersionedRandomAccessStack&lt;T, B&gt;::bookmark_type" ref="fetch::storage::VersionedRandomAccessStack#fetch::storage::VersionedRandomAccessStack::bookmark_type" />
    </return>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::ResetBookmark" name="ResetBookmark" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::NextBookmark" name="NextBookmark" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::PreviousBookmark" name="PreviousBookmark" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::size" name="size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::storage::VersionedRandomAccessStack::empty" name="empty">
    <return>
      <type name="size_t" />
    </return>
  </method>
</classtemplate>
