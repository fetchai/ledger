<?xml version='1.0' encoding='utf-8'?>
<class id="fetch::rpc::FeedSubscriptionManager" name="FeedSubscriptionManager" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> This is a subscription manager that is used on the server side.</brief>
  <doc>This class manages the client subscriptions. It is added to the
protocol and used by the service unit.

A limitation of this implementation is that it does not have
multi-service support yet. This is, however, easily implmented at a
later point.
</doc>
  <methodtemplate id="fetch::rpc::FeedSubscriptionManager::AttachToService" name="AttachToService">
    <brief> Attaches a feed to a given service.</brief>
    <doc>This function attaches a service to the feed. It ensures that
messages published by the publisher are packed and send to the
right client.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::rpc::FeedSubscriptionManager::AttachToService::service" name="service">
      <doc>is a pointer to the service</doc>
      <type name="T" qualifier="*" />
    </argument>
    <templatetypeparameter id="fetch::rpc::FeedSubscriptionManager::AttachToService::T" name="T">
      <brief>is the type of the service</brief>
    </templatetypeparameter>
  </methodtemplate>
  <constructor id="fetch::rpc::FeedSubscriptionManager::FeedSubscriptionManager" name="FeedSubscriptionManager">
    <brief> A feed that services can subscribe to.</brief>
    <doc>The subscription manager takes a publisher and manages its
subscribers. It when a protocol is added to the service, the feed
manager is bridges to the service via the
<ref ref="fetch::rpc::FeedSubscriptionManager#fetch::rpc::FeedSubscriptionManager::AttachToService">fetch::rpc::FeedSubscriptionManager::AttachToService</ref> function. The service
must implement a Send function that fulfills the concept given for
a service.
</doc>
    <argument id="fetch::rpc::FeedSubscriptionManager::FeedSubscriptionManager::feed" name="feed">
      <doc>is the feed number defined in the protocol.</doc>
      <type name="feed_handler_type" qualifier=" const &amp;" ref="fetch::rpc#fetch::rpc::feed_handler_type" />
    </argument>
    <argument id="fetch::rpc::FeedSubscriptionManager::FeedSubscriptionManager::publisher" name="publisher">
      <doc>is an implementation class that subclasses
<ref ref="fetch::rpc::AbstractPublicationFeed#fetch::rpc::AbstractPublicationFeed">fetch::rpc::AbstractPublicationFeed</ref>.</doc>
      <type name="AbstractPublicationFeed" qualifier="*" ref="fetch::rpc::AbstractPublicationFeed#fetch::rpc::AbstractPublicationFeed" />
    </argument>
  </constructor>
  <method id="fetch::rpc::FeedSubscriptionManager::feed" name="feed">
    <brief> Returns the feed type.</brief>
    <return>
      <doc>the feed type.</doc>
      <type name="feed_handler_type" qualifier=" const &amp;" ref="fetch::rpc#fetch::rpc::feed_handler_type" />
    </return>
  </method>
  <method id="fetch::rpc::FeedSubscriptionManager::publisher" name="publisher">
    <brief> Returns a pointer to the abstract publisher.</brief>
    <return>
      <doc>the publisher.</doc>
      <type name="AbstractPublicationFeed" qualifier="*" ref="fetch::rpc::AbstractPublicationFeed#fetch::rpc::AbstractPublicationFeed" />
    </return>
  </method>
  <method id="fetch::rpc::FeedSubscriptionManager::Subscribe" name="Subscribe">
    <brief> Subscribe client to feed.</brief>
    <doc>This function is intended to be used by the <ref ref="fetch::rpc::Protocol#fetch::rpc::Protocol">fetch::rpc::Protocol</ref> through
which services can subscribe their clients to the feed.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::rpc::FeedSubscriptionManager::Subscribe::client" name="client">
      <doc>is the client id.</doc>
      <type name="uint64_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::rpc::FeedSubscriptionManager::Subscribe::id" name="id">
      <doc>is the subscription id allocated on the client side.</doc>
      <type name="subscription_handler_type" qualifier=" const &amp;" ref="fetch::rpc#fetch::rpc::subscription_handler_type" />
    </argument>
  </method>
  <method id="fetch::rpc::FeedSubscriptionManager::Unsubscribe" name="Unsubscribe">
    <brief> Unsubscribe client to feed.</brief>
    <doc>This function is intended to be used by the <ref ref="fetch::rpc::Protocol#fetch::rpc::Protocol">fetch::rpc::Protocol</ref> through
which services can unsubscribe their clients to the feed.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::rpc::FeedSubscriptionManager::Unsubscribe::client" name="client">
      <doc>is the client id.</doc>
      <type name="uint64_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::rpc::FeedSubscriptionManager::Unsubscribe::id" name="id">
      <doc>is the subscription id allocated on the client side.</doc>
      <type name="subscription_handler_type" qualifier=" const &amp;" ref="fetch::rpc#fetch::rpc::subscription_handler_type" />
    </argument>
  </method>
</class>
