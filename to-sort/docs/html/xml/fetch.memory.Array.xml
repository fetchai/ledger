<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fetch::memory::Array" name="Array" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatetypeparameter id="fetch::memory::Array::T" name="T" />
  <typedef id="fetch::memory::Array::counter_type" name="counter_type">
    <type name="std::__1::atomic&lt;unsigned long long&gt;" />
  </typedef>
  <typedef id="fetch::memory::Array::iterator" name="iterator">
    <type name="ForwardIterator&lt;T&gt;" ref="fetch::memory::ForwardIterator#fetch::memory::ForwardIterator" />
  </typedef>
  <typedef id="fetch::memory::Array::reverse_iterator" name="reverse_iterator">
    <type name="BackwardIterator&lt;T&gt;" ref="fetch::memory::BackwardIterator#fetch::memory::BackwardIterator" />
  </typedef>
  <typedef id="fetch::memory::Array::self_type" name="self_type">
    <type name="Array" ref="fetch::memory::Array#fetch::memory::Array" />
  </typedef>
  <typedef id="fetch::memory::Array::type" name="type">
    <type name="T" />
  </typedef>
  <enum anonymous="yes" id="fetch::memory::Array::(anonymous::1)" name="(anonymous::1)">
    <enumvalue id="fetch::memory::Array::E_SIMD_SIZE" name="E_SIMD_SIZE" value="0" />
    <enumvalue id="fetch::memory::Array::E_SIMD_COUNT" name="E_SIMD_COUNT" value="0" />
    <enumvalue id="fetch::memory::Array::E_LOG_SIMD_COUNT" name="E_LOG_SIMD_COUNT" value="0" />
  </enum>
  <constructor id="fetch::memory::Array::Array&lt;T&gt;" name="Array&lt;T&gt;">
    <argument id="fetch::memory::Array::Array&lt;T&gt;::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::memory::Array::Array&lt;T&gt;" name="Array&lt;T&gt;" />
  <constructor id="fetch::memory::Array::Array&lt;T&gt;" name="Array&lt;T&gt;">
    <argument id="fetch::memory::Array::Array&lt;T&gt;::other" name="other">
      <type name="Array" qualifier=" const &amp;" ref="fetch::memory::Array#fetch::memory::Array" />
    </argument>
  </constructor>
  <constructor id="fetch::memory::Array::Array&lt;T&gt;" name="Array&lt;T&gt;">
    <argument id="fetch::memory::Array::Array&lt;T&gt;::other" name="other">
      <type name="Array&lt;T&gt; &amp;&amp;" />
    </argument>
  </constructor>
  <method id="fetch::memory::Array::operator=" name="operator=">
    <return>
      <type name="Array" qualifier=" &amp;" ref="fetch::memory::Array#fetch::memory::Array" />
    </return>
    <argument id="fetch::memory::Array::operator=::other" name="other">
      <type name="Array&lt;T&gt; &amp;&amp;" />
    </argument>
  </method>
  <destructor id="fetch::memory::Array::~Array&lt;T&gt;" name="~Array&lt;T&gt;" />
  <method id="fetch::memory::Array::begin" name="begin">
    <return>
      <type name="Array&lt;T&gt;::iterator" ref="fetch::memory::Array#fetch::memory::Array::iterator" />
    </return>
  </method>
  <method id="fetch::memory::Array::end" name="end">
    <return>
      <type name="Array&lt;T&gt;::iterator" ref="fetch::memory::Array#fetch::memory::Array::iterator" />
    </return>
  </method>
  <method id="fetch::memory::Array::rbegin" name="rbegin">
    <return>
      <type name="Array&lt;T&gt;::reverse_iterator" ref="fetch::memory::Array#fetch::memory::Array::reverse_iterator" />
    </return>
  </method>
  <method id="fetch::memory::Array::rend" name="rend">
    <return>
      <type name="Array&lt;T&gt;::reverse_iterator" ref="fetch::memory::Array#fetch::memory::Array::reverse_iterator" />
    </return>
  </method>
  <method id="fetch::memory::Array::operator[]" name="operator[]">
    <return>
      <type name="T" qualifier=" &amp;" />
    </return>
    <argument id="fetch::memory::Array::operator[]::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::Array::operator[]" name="operator[]">
    <return>
      <type name="const T" qualifier=" const &amp;" />
    </return>
    <argument id="fetch::memory::Array::operator[]::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::Array::At" name="At">
    <return>
      <type name="T" qualifier=" &amp;" />
    </return>
    <argument id="fetch::memory::Array::At::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::Array::At" name="At">
    <return>
      <type name="const T" qualifier=" const &amp;" />
    </return>
    <argument id="fetch::memory::Array::At::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::Array::Set" name="Set">
    <return>
      <type name="const T" qualifier=" const &amp;" />
    </return>
    <argument id="fetch::memory::Array::Set::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::Array::Set::v" name="v">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::Array::operator=" name="operator=">
    <return>
      <type name="Array&lt;T&gt;::self_type" qualifier=" &amp;" ref="fetch::memory::Array#fetch::memory::Array::self_type" />
    </return>
    <argument id="fetch::memory::Array::operator=::other" name="other">
      <type name="Array" qualifier=" const &amp;" ref="fetch::memory::Array#fetch::memory::Array" />
    </argument>
  </method>
  <method id="fetch::memory::Array::simd_size" name="simd_size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::memory::Array::size" name="size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::memory::Array::padded_size" name="padded_size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::memory::Array::pointer" name="pointer">
    <return>
      <type name="Array&lt;T&gt;::type" qualifier="*" ref="fetch::memory::Array#fetch::memory::Array::type" />
    </return>
  </method>
</classtemplate>
