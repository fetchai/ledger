<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fetch::vectorize::VectorMemoryProxy" name="VectorMemoryProxy" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatetypeparameter id="fetch::vectorize::VectorMemoryProxy::T" name="T" />
  <templatenontypeparameter id="fetch::vectorize::VectorMemoryProxy::L" name="L">
    <type name="size_t" />
  </templatenontypeparameter>
  <templatenontypeparameter default="InstructionSet::" id="fetch::vectorize::VectorMemoryProxy::I" name="I">
    <type name="fetch::vectorize::InstructionSet" ref="fetch::vectorize#fetch::vectorize::InstructionSet" />
  </templatenontypeparameter>
  <typedef id="fetch::vectorize::VectorMemoryProxy::register_type" name="register_type">
    <type name="VectorRegister&lt;T, L, I&gt;" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
  </typedef>
  <typedef id="fetch::vectorize::VectorMemoryProxy::type" name="type">
    <type name="T" />
  </typedef>
  <constructor id="fetch::vectorize::VectorMemoryProxy::VectorMemoryProxy&lt;T, L, I&gt;" name="VectorMemoryProxy&lt;T, L, I&gt;">
    <argument id="fetch::vectorize::VectorMemoryProxy::VectorMemoryProxy&lt;T, L, I&gt;::ptr" name="ptr">
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::type" qualifier="*" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::type" />
    </argument>
  </constructor>
  <conversionfunction id="fetch::vectorize::VectorMemoryProxy::operator VectorRegister&lt;type-parameter-0-0, L, I&gt;" name="operator VectorRegister&lt;type-parameter-0-0, L, I&gt;">
    <return>
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::register_type" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::register_type" />
    </return>
  </conversionfunction>
  <methodtemplate id="fetch::vectorize::VectorMemoryProxy::operator type-parameter-1-0" name="operator type-parameter-1-0">
    <return>
      <type name="G" />
    </return>
    <templatetypeparameter id="fetch::vectorize::VectorMemoryProxy::operator type-parameter-1-0::G" name="G" />
  </methodtemplate>
  <method id="fetch::vectorize::VectorMemoryProxy::operator*" name="operator*">
    <return>
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::register_type" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::register_type" />
    </return>
    <argument id="fetch::vectorize::VectorMemoryProxy::operator*::other" name="other">
      <type name="VectorMemoryProxy" qualifier=" const &amp;" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorMemoryProxy::operator/" name="operator/">
    <return>
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::register_type" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::register_type" />
    </return>
    <argument id="fetch::vectorize::VectorMemoryProxy::operator/::other" name="other">
      <type name="VectorMemoryProxy" qualifier=" const &amp;" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorMemoryProxy::operator+" name="operator+">
    <return>
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::register_type" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::register_type" />
    </return>
    <argument id="fetch::vectorize::VectorMemoryProxy::operator+::other" name="other">
      <type name="VectorMemoryProxy" qualifier=" const &amp;" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorMemoryProxy::operator-" name="operator-">
    <return>
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::register_type" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::register_type" />
    </return>
    <argument id="fetch::vectorize::VectorMemoryProxy::operator-::other" name="other">
      <type name="VectorMemoryProxy" qualifier=" const &amp;" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorMemoryProxy::operator&amp;" name="operator&amp;">
    <return>
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::register_type" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::register_type" />
    </return>
    <argument id="fetch::vectorize::VectorMemoryProxy::operator&amp;::other" name="other">
      <type name="VectorMemoryProxy" qualifier=" const &amp;" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorMemoryProxy::operator|" name="operator|">
    <return>
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::register_type" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::register_type" />
    </return>
    <argument id="fetch::vectorize::VectorMemoryProxy::operator|::other" name="other">
      <type name="VectorMemoryProxy" qualifier=" const &amp;" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorMemoryProxy::operator^" name="operator^">
    <return>
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::register_type" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::register_type" />
    </return>
    <argument id="fetch::vectorize::VectorMemoryProxy::operator^::other" name="other">
      <type name="VectorMemoryProxy" qualifier=" const &amp;" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorMemoryProxy::operator=" name="operator=">
    <return>
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::register_type" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::register_type" />
    </return>
    <argument id="fetch::vectorize::VectorMemoryProxy::operator=::reg" name="reg">
      <type name="VectorMemoryProxy&lt;T, L, I&gt;::register_type" qualifier=" const &amp;" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy::register_type" />
    </argument>
  </method>
</classtemplate>
