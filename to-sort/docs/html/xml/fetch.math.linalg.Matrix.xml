<?xml version='1.0' encoding='utf-8'?>
<classtemplate abstract="true" id="fetch::math::linalg::Matrix" name="Matrix" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <base access="public">
    <type name="" />
  </base>
  <templatetypeparameter id="fetch::math::linalg::Matrix::T" name="T" />
  <typedef id="fetch::math::linalg::Matrix::super_type" name="super_type">
    <type name="memory::SquareArray&lt;T&gt;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray" />
  </typedef>
  <typedef id="fetch::math::linalg::Matrix::type" name="type">
    <type name="Matrix&lt;T&gt;::super_type" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix::super_type" />
  </typedef>
  <enum anonymous="yes" id="fetch::math::linalg::Matrix::(anonymous::1)" name="(anonymous::1)">
    <enumvalue id="fetch::math::linalg::Matrix::INVERSION_OK" name="INVERSION_OK" value="0" />
    <enumvalue id="fetch::math::linalg::Matrix::INVERSION_SINGULAR" name="INVERSION_SINGULAR" value="0" />
    <enumvalue id="fetch::math::linalg::Matrix::E_SIMD_BLOCKS" name="E_SIMD_BLOCKS" value="0" />
  </enum>
  <constructor abstract="yes" id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;" name="Matrix&lt;T&gt;" />
  <constructor abstract="yes" id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;" name="Matrix&lt;T&gt;">
    <argument id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;::other" name="other">
      <type name="Matrix&lt;T&gt; &amp;&amp;" />
    </argument>
  </constructor>
  <constructor abstract="yes" id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;" name="Matrix&lt;T&gt;">
    <argument id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </constructor>
  <method abstract="yes" id="fetch::math::linalg::Matrix::operator=" name="operator=">
    <return>
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator=::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method abstract="yes" id="fetch::math::linalg::Matrix::operator=" name="operator=">
    <return>
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator=::other" name="other">
      <type name="Matrix&lt;T&gt; &amp;&amp;" />
    </argument>
  </method>
  <constructor id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;" name="Matrix&lt;T&gt;">
    <argument id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;::other" name="other">
      <type name="Matrix&lt;T&gt;::super_type" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix::super_type" />
    </argument>
  </constructor>
  <constructor id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;" name="Matrix&lt;T&gt;">
    <argument id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;::other" name="other">
      <type name="super_type &amp;&amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;" name="Matrix&lt;T&gt;">
    <argument id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;::h" name="h">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::math::linalg::Matrix::Matrix&lt;T&gt;::w" name="w">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <method id="fetch::math::linalg::Matrix::operator+=" name="operator+=">
    <return>
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator+=::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator-=" name="operator-=">
    <return>
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator-=::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator*=" name="operator*=">
    <return>
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator*=::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator/=" name="operator/=">
    <return>
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator/=::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator|=" name="operator|=">
    <return>
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator|=::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator&amp;=" name="operator&amp;=">
    <return>
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator&amp;=::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator+" name="operator+">
    <return>
      <type name="Matrix" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator+::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator-" name="operator-">
    <return>
      <type name="Matrix" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator-::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator*" name="operator*">
    <return>
      <type name="Matrix" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator*::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator/" name="operator/">
    <return>
      <type name="Matrix" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator/::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator|" name="operator|">
    <return>
      <type name="Matrix" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator|::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::operator&amp;" name="operator&amp;">
    <return>
      <type name="Matrix" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </return>
    <argument id="fetch::math::linalg::Matrix::operator&amp;::other" name="other">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::Transpose" name="Transpose">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::math::linalg::Matrix::Invert" name="Invert">
    <return>
      <type builtin="yes" name="int" />
    </return>
  </method>
  <method id="fetch::math::linalg::Matrix::Sum" name="Sum">
    <return>
      <type name="Matrix&lt;T&gt;::type" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix::type" />
    </return>
  </method>
  <method id="fetch::math::linalg::Matrix::Max" name="Max">
    <return>
      <type name="Matrix&lt;T&gt;::type" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix::type" />
    </return>
  </method>
  <method id="fetch::math::linalg::Matrix::Min" name="Min">
    <return>
      <type name="Matrix&lt;T&gt;::type" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix::type" />
    </return>
  </method>
  <method id="fetch::math::linalg::Matrix::AbsMax" name="AbsMax">
    <return>
      <type name="Matrix&lt;T&gt;::type" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix::type" />
    </return>
  </method>
  <method id="fetch::math::linalg::Matrix::AbsMin" name="AbsMin">
    <return>
      <type name="Matrix&lt;T&gt;::type" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix::type" />
    </return>
  </method>
  <method id="fetch::math::linalg::Matrix::Mean" name="Mean">
    <return>
      <type name="Matrix&lt;T&gt;::type" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix::type" />
    </return>
  </method>
  <method id="fetch::math::linalg::Matrix::DotReference" name="DotReference">
    <doc>
type Variance(type const &amp;mean) const { }
type Variance() const { }
void Normalise(type const &amp;norm) {
}
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::math::linalg::Matrix::DotReference::m" name="m">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
    <argument id="fetch::math::linalg::Matrix::DotReference::ret" name="ret">
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::Dot" name="Dot">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::math::linalg::Matrix::Dot::m" name="m">
      <type name="Matrix" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
    <argument id="fetch::math::linalg::Matrix::Dot::ret" name="ret">
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
  <method id="fetch::math::linalg::Matrix::DotTransposed" name="DotTransposed">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::math::linalg::Matrix::DotTransposed::m" name="m">
      <type name="Matrix" qualifier=" const &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
    <argument id="fetch::math::linalg::Matrix::DotTransposed::ret" name="ret">
      <type name="Matrix" qualifier=" &amp;" ref="fetch::math::linalg::Matrix#fetch::math::linalg::Matrix" />
    </argument>
  </method>
</classtemplate>
