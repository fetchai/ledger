<?xml version='1.0' encoding='utf-8'?>
<class abstract="true" id="fetch::unittest::Expression" name="Expression" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <methodtemplate id="fetch::unittest::Expression::Expression" name="Expression">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::unittest::Expression::Expression::v" name="v">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::Expression::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::unittest::Expression::operator!=" name="operator!=">
    <return>
      <type name="Expression" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
    <argument id="fetch::unittest::Expression::operator!=::rhs_value" name="rhs_value">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::operator!=::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::unittest::Expression::operator&amp;" name="operator&amp;">
    <return>
      <type name="Expression" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
    <argument id="fetch::unittest::Expression::operator&amp;::rhs_value" name="rhs_value">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::operator&amp;::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::unittest::Expression::operator&amp;&amp;" name="operator&amp;&amp;">
    <return>
      <type name="Expression" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
    <argument id="fetch::unittest::Expression::operator&amp;&amp;::rhs_value" name="rhs_value">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::operator&amp;&amp;::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::unittest::Expression::operator*" name="operator*">
    <return>
      <type name="Expression" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
    <argument id="fetch::unittest::Expression::operator*::rhs_value" name="rhs_value">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::operator*::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::unittest::Expression::operator+" name="operator+">
    <return>
      <type name="Expression" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
    <argument id="fetch::unittest::Expression::operator+::rhs_value" name="rhs_value">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::operator+::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::unittest::Expression::operator-" name="operator-">
    <return>
      <type name="Expression" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
    <argument id="fetch::unittest::Expression::operator-::rhs_value" name="rhs_value">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::operator-::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::unittest::Expression::operator/" name="operator/">
    <return>
      <type name="Expression" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
    <argument id="fetch::unittest::Expression::operator/::rhs_value" name="rhs_value">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::operator/::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::unittest::Expression::operator==" name="operator==">
    <return>
      <type name="Expression" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
    <argument id="fetch::unittest::Expression::operator==::rhs_value" name="rhs_value">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::operator==::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::unittest::Expression::operator|" name="operator|">
    <return>
      <type name="Expression" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
    <argument id="fetch::unittest::Expression::operator|::rhs_value" name="rhs_value">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::operator|::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::unittest::Expression::operator||" name="operator||">
    <return>
      <type name="Expression" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
    <argument id="fetch::unittest::Expression::operator||::rhs_value" name="rhs_value">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::unittest::Expression::operator||::T" name="T" />
  </methodtemplate>
  <constructor abstract="yes" id="fetch::unittest::Expression::Expression" name="Expression" />
  <constructor id="fetch::unittest::Expression::Expression" name="Expression">
    <argument id="fetch::unittest::Expression::Expression::other" name="other">
      <type name="Expression" qualifier=" const &amp;" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </argument>
  </constructor>
  <constructor abstract="yes" id="fetch::unittest::Expression::Expression" name="Expression">
    <argument id="fetch::unittest::Expression::Expression::other" name="other">
      <type name="Expression &amp;&amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::unittest::Expression::Expression" name="Expression">
    <argument id="fetch::unittest::Expression::Expression::expr" name="expr">
      <type name="std::__1::string" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::unittest::Expression::Expression" name="Expression">
    <argument id="fetch::unittest::Expression::Expression::expr" name="expr">
      <type name="std::__1::string" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::unittest::Expression::Expression::lhs" name="lhs">
      <type name="Expression" qualifier=" const &amp;" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </argument>
    <argument id="fetch::unittest::Expression::Expression::rhs" name="rhs">
      <type name="Expression" qualifier=" const &amp;" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </argument>
  </constructor>
  <method id="fetch::unittest::Expression::expression" name="expression">
    <return>
      <type name="std::__1::string" qualifier=" const &amp;" />
    </return>
  </method>
  <method id="fetch::unittest::Expression::left_hand_side" name="left_hand_side">
    <return>
      <type name="Expression" qualifier=" const *" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
  </method>
  <method id="fetch::unittest::Expression::right_hand_side" name="right_hand_side">
    <return>
      <type name="Expression" qualifier=" const *" ref="fetch::unittest::Expression#fetch::unittest::Expression" />
    </return>
  </method>
</class>
