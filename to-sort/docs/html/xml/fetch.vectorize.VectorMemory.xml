<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fetch::vectorize::VectorMemory" name="VectorMemory" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatetypeparameter id="fetch::vectorize::VectorMemory::T" name="T" />
  <templatenontypeparameter default="InstructionSet::" id="fetch::vectorize::VectorMemory::I" name="I">
    <type name="fetch::vectorize::InstructionSet" ref="fetch::vectorize#fetch::vectorize::InstructionSet" />
  </templatenontypeparameter>
  <templatenontypeparameter id="fetch::vectorize::VectorMemory::L" name="L">
    <type name="size_t" />
  </templatenontypeparameter>
  <typedef id="fetch::vectorize::VectorMemory::register_type" name="register_type">
    <type name="VectorRegister&lt;T, L, I&gt;" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
  </typedef>
  <typedef id="fetch::vectorize::VectorMemory::memory_proxy_type" name="memory_proxy_type">
    <type name="VectorMemoryProxy&lt;T, L, I&gt;" ref="fetch::vectorize::VectorMemoryProxy#fetch::vectorize::VectorMemoryProxy" />
  </typedef>
  <typedef id="fetch::vectorize::VectorMemory::type" name="type">
    <type name="T" />
  </typedef>
  <constructor id="fetch::vectorize::VectorMemory::VectorMemory&lt;T, I, L&gt;" name="VectorMemory&lt;T, I, L&gt;" />
  <constructor id="fetch::vectorize::VectorMemory::VectorMemory&lt;T, I, L&gt;" name="VectorMemory&lt;T, I, L&gt;">
    <argument id="fetch::vectorize::VectorMemory::VectorMemory&lt;T, I, L&gt;::ptr" name="ptr">
      <type name="VectorMemory&lt;T, I, L&gt;::type" qualifier="*" ref="fetch::vectorize::VectorMemory#fetch::vectorize::VectorMemory::type" />
    </argument>
  </constructor>
  <method id="fetch::vectorize::VectorMemory::operator++" name="operator++">
    <brief>VectorMemory operator+=() { return *this; }</brief>
    <return>
      <type name="VectorMemory" qualifier=" &amp;" ref="fetch::vectorize::VectorMemory#fetch::vectorize::VectorMemory" />
    </return>
  </method>
  <method id="fetch::vectorize::VectorMemory::operator*" name="operator*">
    <return>
      <type name="VectorMemory&lt;T, I, L&gt;::memory_proxy_type" ref="fetch::vectorize::VectorMemory#fetch::vectorize::VectorMemory::memory_proxy_type" />
    </return>
  </method>
  <method id="fetch::vectorize::VectorMemory::operator[]" name="operator[]">
    <return>
      <type name="VectorMemory&lt;T, I, L&gt;::memory_proxy_type" ref="fetch::vectorize::VectorMemory#fetch::vectorize::VectorMemory::memory_proxy_type" />
    </return>
    <argument id="fetch::vectorize::VectorMemory::operator[]::n" name="n">
      <type name="size_t" />
    </argument>
  </method>
</classtemplate>
