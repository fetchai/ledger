<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fetch::storage::RandomAccessStack" name="RandomAccessStack" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatetypeparameter id="fetch::storage::RandomAccessStack::T" name="T" />
  <templatetypeparameter id="fetch::storage::RandomAccessStack::D" name="D">
    <default>
      <type name="uint64_t" />
    </default>
  </templatetypeparameter>
  <typedef id="fetch::storage::RandomAccessStack::header_extra_type" name="header_extra_type">
    <type name="D" />
  </typedef>
  <typedef id="fetch::storage::RandomAccessStack::type" name="type">
    <type name="T" />
  </typedef>
  <typedef id="fetch::storage::RandomAccessStack::byte_array_type" name="byte_array_type">
    <type name="byte_array::ReferencedByteArray" />
  </typedef>
  <method id="fetch::storage::RandomAccessStack::Load" name="Load">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::RandomAccessStack::Load::filename" name="filename">
      <type name="RandomAccessStack&lt;T, D&gt;::byte_array_type" qualifier=" const &amp;" ref="fetch::storage::RandomAccessStack#fetch::storage::RandomAccessStack::byte_array_type" />
    </argument>
  </method>
  <method id="fetch::storage::RandomAccessStack::New" name="New">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::RandomAccessStack::New::filename" name="filename">
      <type name="RandomAccessStack&lt;T, D&gt;::byte_array_type" qualifier=" const &amp;" ref="fetch::storage::RandomAccessStack#fetch::storage::RandomAccessStack::byte_array_type" />
    </argument>
  </method>
  <method id="fetch::storage::RandomAccessStack::Get" name="Get">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::RandomAccessStack::Get::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::storage::RandomAccessStack::Get::object" name="object">
      <type name="RandomAccessStack&lt;T, D&gt;::type" qualifier=" &amp;" ref="fetch::storage::RandomAccessStack#fetch::storage::RandomAccessStack::type" />
    </argument>
  </method>
  <method id="fetch::storage::RandomAccessStack::Set" name="Set">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::RandomAccessStack::Set::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::storage::RandomAccessStack::Set::object" name="object">
      <type name="RandomAccessStack&lt;T, D&gt;::type" qualifier=" const &amp;" ref="fetch::storage::RandomAccessStack#fetch::storage::RandomAccessStack::type" />
    </argument>
  </method>
  <method id="fetch::storage::RandomAccessStack::SetExtraHeader" name="SetExtraHeader">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::RandomAccessStack::SetExtraHeader::he" name="he">
      <type name="RandomAccessStack&lt;T, D&gt;::header_extra_type" qualifier=" const &amp;" ref="fetch::storage::RandomAccessStack#fetch::storage::RandomAccessStack::header_extra_type" />
    </argument>
  </method>
  <method id="fetch::storage::RandomAccessStack::header_extra" name="header_extra">
    <return>
      <type name="RandomAccessStack&lt;T, D&gt;::header_extra_type" ref="fetch::storage::RandomAccessStack#fetch::storage::RandomAccessStack::header_extra_type" />
    </return>
  </method>
  <method id="fetch::storage::RandomAccessStack::Push" name="Push">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::RandomAccessStack::Push::object" name="object">
      <type name="RandomAccessStack&lt;T, D&gt;::type" qualifier=" const &amp;" ref="fetch::storage::RandomAccessStack#fetch::storage::RandomAccessStack::type" />
    </argument>
  </method>
  <method id="fetch::storage::RandomAccessStack::Pop" name="Pop">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::storage::RandomAccessStack::Top" name="Top">
    <return>
      <type name="RandomAccessStack&lt;T, D&gt;::type" ref="fetch::storage::RandomAccessStack#fetch::storage::RandomAccessStack::type" />
    </return>
  </method>
  <method id="fetch::storage::RandomAccessStack::Swap" name="Swap">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::storage::RandomAccessStack::Swap::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::storage::RandomAccessStack::Swap::j" name="j">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::storage::RandomAccessStack::size" name="size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::storage::RandomAccessStack::empty" name="empty">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::storage::RandomAccessStack::Clear" name="Clear">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
</classtemplate>
