<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fetch::service::ServiceServer" name="ServiceServer" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <base access="public">
    <type name="" />
  </base>
  <base access="public">
    <type name="ServiceServerInterface" ref="fetch::service::ServiceServerInterface#fetch::service::ServiceServerInterface" />
  </base>
  <templatetypeparameter id="fetch::service::ServiceServer::T" name="T" />
  <typedef id="fetch::service::ServiceServer::super_type" name="super_type">
    <type name="T" />
  </typedef>
  <typedef id="fetch::service::ServiceServer::self_type" name="self_type">
    <type name="ServiceServer" ref="fetch::service::ServiceServer#fetch::service::ServiceServer" />
  </typedef>
  <typedef id="fetch::service::ServiceServer::thread_manager_type" name="thread_manager_type">
    <type name="ServiceServer&lt;T&gt;::super_type" ref="fetch::service::ServiceServer#fetch::service::ServiceServer::super_type" />
  </typedef>
  <typedef id="fetch::service::ServiceServer::thread_manager_ptr_type" name="thread_manager_ptr_type">
    <type name="ServiceServer&lt;T&gt;::super_type" ref="fetch::service::ServiceServer#fetch::service::ServiceServer::super_type" />
  </typedef>
  <typedef id="fetch::service::ServiceServer::event_handle_type" name="event_handle_type">
    <type name="ServiceServer&lt;T&gt;::thread_manager_type" ref="fetch::service::ServiceServer#fetch::service::ServiceServer::thread_manager_type" />
  </typedef>
  <typedef id="fetch::service::ServiceServer::handle_type" name="handle_type">
    <type name="T" />
  </typedef>
  <class name="ClientRPCInterface" ref="fetch::service::ServiceServer::ClientRPCInterface#fetch::service::ServiceServer::ClientRPCInterface">
    <brief>TODO Rename and move</brief>
  </class>
  <struct name="PendingMessage" ref="fetch::service::ServiceServer::PendingMessage#fetch::service::ServiceServer::PendingMessage">
    <brief>EN of ClientRPC</brief>
  </struct>
  <typedef id="fetch::service::ServiceServer::byte_array_type" name="byte_array_type">
    <type name="byte_array::ConstByteArray" />
  </typedef>
  <constructor id="fetch::service::ServiceServer::ServiceServer&lt;T&gt;" name="ServiceServer&lt;T&gt;">
    <argument id="fetch::service::ServiceServer::ServiceServer&lt;T&gt;::port" name="port">
      <type name="uint16_t" />
    </argument>
    <argument id="fetch::service::ServiceServer::ServiceServer&lt;T&gt;::thread_manager" name="thread_manager">
      <type name="ServiceServer&lt;T&gt;::thread_manager_ptr_type" ref="fetch::service::ServiceServer#fetch::service::ServiceServer::thread_manager_ptr_type" />
    </argument>
  </constructor>
  <destructor id="fetch::service::ServiceServer::~ServiceServer&lt;T&gt;" name="~ServiceServer&lt;T&gt;" virtual="yes" />
  <method id="fetch::service::ServiceServer::ServiceInterfaceOf" name="ServiceInterfaceOf">
    <return>
      <type name="ServiceServer&lt;T&gt;::ClientRPCInterface" qualifier=" &amp;" ref="fetch::service::ServiceServer::ClientRPCInterface#fetch::service::ServiceServer::ClientRPCInterface" />
    </return>
    <argument id="fetch::service::ServiceServer::ServiceInterfaceOf::i" name="i">
      <type name="ServiceServer&lt;T&gt;::handle_type" qualifier=" const &amp;" ref="fetch::service::ServiceServer#fetch::service::ServiceServer::handle_type" />
    </argument>
  </method>
  <method access="protected" id="fetch::service::ServiceServer::DeliverResponse" name="DeliverResponse" override="yes">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::service::ServiceServer::DeliverResponse::client" name="client">
      <type name="ServiceServer&lt;T&gt;::handle_type" ref="fetch::service::ServiceServer#fetch::service::ServiceServer::handle_type" />
    </argument>
    <argument id="fetch::service::ServiceServer::DeliverResponse::msg" name="msg">
      <type name="network::message_type" qualifier=" const &amp;" />
    </argument>
    <override name="ServiceServerInterface::DeliverResponse" ref="fetch::service::ServiceServerInterface#fetch::service::ServiceServerInterface::DeliverResponse" />
  </method>
</classtemplate>
