<?xml version='1.0' encoding='utf-8'?>
<class id="fetch::serializers::TypedByte_ArrayBuffer" name="TypedByte_ArrayBuffer" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <methodtemplate id="fetch::serializers::TypedByte_ArrayBuffer::operator&lt;&lt;" name="operator&lt;&lt;">
    <return>
      <type name="TypedByte_ArrayBuffer" qualifier=" &amp;" ref="fetch::serializers::TypedByte_ArrayBuffer#fetch::serializers::TypedByte_ArrayBuffer" />
    </return>
    <argument id="fetch::serializers::TypedByte_ArrayBuffer::operator&lt;&lt;::val" name="val">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::serializers::TypedByte_ArrayBuffer::operator&lt;&lt;::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::serializers::TypedByte_ArrayBuffer::operator&gt;&gt;" name="operator&gt;&gt;">
    <return>
      <type name="TypedByte_ArrayBuffer" qualifier=" &amp;" ref="fetch::serializers::TypedByte_ArrayBuffer#fetch::serializers::TypedByte_ArrayBuffer" />
    </return>
    <argument id="fetch::serializers::TypedByte_ArrayBuffer::operator&gt;&gt;::val" name="val">
      <type name="T" qualifier=" &amp;" />
    </argument>
    <templatetypeparameter id="fetch::serializers::TypedByte_ArrayBuffer::operator&gt;&gt;::T" name="T" />
  </methodtemplate>
  <typedef id="fetch::serializers::TypedByte_ArrayBuffer::byte_array_type" name="byte_array_type">
    <type name="byte_array::ReferencedByteArray" />
  </typedef>
  <constructor id="fetch::serializers::TypedByte_ArrayBuffer::TypedByte_ArrayBuffer" name="TypedByte_ArrayBuffer" />
  <constructor id="fetch::serializers::TypedByte_ArrayBuffer::TypedByte_ArrayBuffer" name="TypedByte_ArrayBuffer">
    <argument id="fetch::serializers::TypedByte_ArrayBuffer::TypedByte_ArrayBuffer::s" name="s">
      <type name="byte_array_type" ref="fetch::serializers::TypedByte_ArrayBuffer#fetch::serializers::TypedByte_ArrayBuffer::byte_array_type" />
    </argument>
  </constructor>
  <method id="fetch::serializers::TypedByte_ArrayBuffer::Allocate" name="Allocate">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::TypedByte_ArrayBuffer::Allocate::val" name="val">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::serializers::TypedByte_ArrayBuffer::bytes_left" name="bytes_left">
    <return>
      <type name="int64_t" />
    </return>
  </method>
  <method id="fetch::serializers::TypedByte_ArrayBuffer::data" name="data">
    <return>
      <type name="byte_array_type" qualifier=" const &amp;" ref="fetch::serializers::TypedByte_ArrayBuffer#fetch::serializers::TypedByte_ArrayBuffer::byte_array_type" />
    </return>
  </method>
  <method id="fetch::serializers::TypedByte_ArrayBuffer::ReadBytes" name="ReadBytes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::TypedByte_ArrayBuffer::ReadBytes::arr" name="arr">
      <type name="uint8_t" qualifier="*" />
    </argument>
    <argument id="fetch::serializers::TypedByte_ArrayBuffer::ReadBytes::size" name="size">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::serializers::TypedByte_ArrayBuffer::Seek" name="Seek">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::TypedByte_ArrayBuffer::Seek::p" name="p">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::serializers::TypedByte_ArrayBuffer::size" name="size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::serializers::TypedByte_ArrayBuffer::SkipBytes" name="SkipBytes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::TypedByte_ArrayBuffer::SkipBytes::size" name="size">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::serializers::TypedByte_ArrayBuffer::Tell" name="Tell">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::serializers::TypedByte_ArrayBuffer::WriteBytes" name="WriteBytes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::TypedByte_ArrayBuffer::WriteBytes::arr" name="arr">
      <type name="uint8_t" qualifier=" const *" />
    </argument>
    <argument id="fetch::serializers::TypedByte_ArrayBuffer::WriteBytes::size" name="size">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
</class>
