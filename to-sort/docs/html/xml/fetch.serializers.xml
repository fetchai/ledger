<?xml version='1.0' encoding='utf-8'?>
<namespace id="fetch::serializers" name="serializers" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <functiontemplate id="fetch::serializers::Deserialize" name="Deserialize">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::Deserialize::serializer" name="serializer">
      <type name="T" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::serializers::Deserialize::s" name="s">
      <type name="byte_array::ReferencedByteArray" qualifier=" &amp;" />
    </argument>
    <templatetypeparameter id="fetch::serializers::Deserialize::T" name="T" />
  </functiontemplate>
  <functiontemplate id="fetch::serializers::Deserialize" name="Deserialize">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::Deserialize::serializer" name="serializer">
      <type name="T" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::serializers::Deserialize::s" name="s">
      <type name="SerializableException" qualifier=" &amp;" ref="fetch::serializers::SerializableException#fetch::serializers::SerializableException" />
    </argument>
    <templatetypeparameter id="fetch::serializers::Deserialize::T" name="T" />
  </functiontemplate>
  <functiontemplate id="fetch::serializers::Deserialize" name="Deserialize">
    <return>
      <type name="typename std::enable_if&lt;std::is_integral&lt;U&gt;::value, void&gt;::type" />
    </return>
    <argument id="fetch::serializers::Deserialize::serializer" name="serializer">
      <type name="T" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::serializers::Deserialize::val" name="val">
      <type name="U" qualifier=" &amp;" />
    </argument>
    <templatetypeparameter id="fetch::serializers::Deserialize::T" name="T" />
    <templatetypeparameter id="fetch::serializers::Deserialize::U" name="U" />
  </functiontemplate>
  <functiontemplate id="fetch::serializers::Deserialize" name="Deserialize">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::Deserialize::serializer" name="serializer">
      <type name="T" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::serializers::Deserialize::s" name="s">
      <type name="std::__1::string" qualifier=" &amp;" />
    </argument>
    <templatetypeparameter id="fetch::serializers::Deserialize::T" name="T" />
  </functiontemplate>
  <functiontemplate id="fetch::serializers::Serialize" name="Serialize">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::Serialize::serializer" name="serializer">
      <type name="T" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::serializers::Serialize::s" name="s">
      <type name="byte_array::ReferencedByteArray" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::serializers::Serialize::T" name="T" />
  </functiontemplate>
  <functiontemplate id="fetch::serializers::Serialize" name="Serialize">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::Serialize::serializer" name="serializer">
      <type name="T" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::serializers::Serialize::s" name="s">
      <type name="SerializableException" qualifier=" const &amp;" ref="fetch::serializers::SerializableException#fetch::serializers::SerializableException" />
    </argument>
    <templatetypeparameter id="fetch::serializers::Serialize::T" name="T" />
  </functiontemplate>
  <functiontemplate id="fetch::serializers::Serialize" name="Serialize">
    <return>
      <type name="typename std::enable_if&lt;std::is_integral&lt;U&gt;::value, void&gt;::type" />
    </return>
    <argument id="fetch::serializers::Serialize::serializer" name="serializer">
      <type name="T" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::serializers::Serialize::val" name="val">
      <type name="const U" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::serializers::Serialize::T" name="T" />
    <templatetypeparameter id="fetch::serializers::Serialize::U" name="U" />
  </functiontemplate>
  <functiontemplate id="fetch::serializers::Serialize" name="Serialize">
    <brief>Byte_Array</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::Serialize::serializer" name="serializer">
      <type name="T" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::serializers::Serialize::s" name="s">
      <type name="std::__1::string" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::serializers::Serialize::T" name="T" />
  </functiontemplate>
  <functiontemplate id="fetch::serializers::Serialize" name="Serialize">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::serializers::Serialize::serializer" name="serializer">
      <type name="T" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::serializers::Serialize::s" name="s">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
    <templatetypeparameter id="fetch::serializers::Serialize::T" name="T" />
  </functiontemplate>
  <namespace name="error" ref="fetch::serializers::error#fetch::serializers::error" />
  <class name="Byte_ArrayBuffer" ref="fetch::serializers::Byte_ArrayBuffer#fetch::serializers::Byte_ArrayBuffer" />
  <class name="SerializableException" ref="fetch::serializers::SerializableException#fetch::serializers::SerializableException" />
  <class name="SizeCounter" ref="fetch::serializers::SizeCounter#fetch::serializers::SizeCounter" />
  <class name="TypedByte_ArrayBuffer" ref="fetch::serializers::TypedByte_ArrayBuffer#fetch::serializers::TypedByte_ArrayBuffer" />
  <structtemplate name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister">
    <templatetypeparameter id="fetch::serializers::TypeRegister::T" name="T" />
  </structtemplate>
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
  <struct name="TypeRegister" ref="fetch::serializers::TypeRegister#fetch::serializers::TypeRegister" />
</namespace>
