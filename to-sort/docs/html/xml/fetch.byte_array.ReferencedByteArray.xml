<?xml version='1.0' encoding='utf-8'?>
<class id="fetch::byte_array::ReferencedByteArray" name="ReferencedByteArray" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <enum anonymous="yes" id="fetch::byte_array::ReferencedByteArray::(anonymous::1)" name="(anonymous::1)">
    <enumvalue id="fetch::byte_array::ReferencedByteArray::NPOS" name="NPOS" value="18446744073709551615" />
  </enum>
  <typedef id="fetch::byte_array::ReferencedByteArray::container_type" name="container_type">
    <type name="uint8_t" />
  </typedef>
  <typedef id="fetch::byte_array::ReferencedByteArray::shared_array_type" name="shared_array_type">
    <type name="memory::SharedArray&lt;unsigned char&gt;" />
  </typedef>
  <constructor id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray" name="ReferencedByteArray" />
  <constructor id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray" name="ReferencedByteArray">
    <argument id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray::str" name="str">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </constructor>
  <constructor id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray" name="ReferencedByteArray">
    <argument id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray::s" name="s">
      <type name="std::__1::string" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray" name="ReferencedByteArray">
    <argument id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray::other" name="other">
      <type name="ReferencedByteArray" qualifier=" const &amp;" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
    </argument>
  </constructor>
  <constructor id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray" name="ReferencedByteArray">
    <argument id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray::other" name="other">
      <type name="ReferencedByteArray" qualifier=" const &amp;" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
    </argument>
    <argument id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray::start" name="start">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::byte_array::ReferencedByteArray::ReferencedByteArray::length" name="length">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <destructor id="fetch::byte_array::ReferencedByteArray::~ReferencedByteArray" name="~ReferencedByteArray" virtual="yes" />
  <method id="fetch::byte_array::ReferencedByteArray::AsInt" name="AsInt">
    <return>
      <type builtin="yes" name="int" />
    </return>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::capacity" name="capacity">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::char_pointer" name="char_pointer">
    <return>
      <type builtin="yes" name="char" qualifier="*" />
    </return>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::char_pointer" name="char_pointer">
    <return>
      <type builtin="yes" name="char" qualifier=" const *" />
    </return>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::Copy" name="Copy">
    <return>
      <type name="ReferencedByteArray" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
    </return>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::Find" name="Find">
    <return>
      <type name="size_t" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::Find::c" name="c">
      <type builtin="yes" name="char" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::byte_array::ReferencedByteArray::Find::pos" name="pos">
      <type name="size_t" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::Match" name="Match">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::Match::str" name="str">
      <type name="ReferencedByteArray" qualifier=" const &amp;" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
    </argument>
    <argument id="fetch::byte_array::ReferencedByteArray::Match::p" name="p">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::Match" name="Match">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::Match::str" name="str">
      <type name="container_type" qualifier=" const *" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray::container_type" />
    </argument>
    <argument id="fetch::byte_array::ReferencedByteArray::Match::pos" name="pos">
      <type name="size_t" />
    </argument>
  </method>
  <conversionfunction id="fetch::byte_array::ReferencedByteArray::operator basic_string" name="operator basic_string">
    <return>
      <type name="std::__1::string" />
    </return>
  </conversionfunction>
  <method id="fetch::byte_array::ReferencedByteArray::operator!=" name="operator!=">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::operator!=::other" name="other">
      <type name="ReferencedByteArray" qualifier=" const &amp;" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::operator!=" name="operator!=">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::operator!=::str" name="str">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::operator+" name="operator+">
    <return>
      <type name="ReferencedByteArray" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::operator+::other" name="other">
      <type name="ReferencedByteArray" qualifier=" const &amp;" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::operator&lt;" name="operator&lt;">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::operator&lt;::other" name="other">
      <type name="ReferencedByteArray" qualifier=" const &amp;" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::operator==" name="operator==">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::operator==::other" name="other">
      <type name="ReferencedByteArray" qualifier=" const &amp;" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::operator==" name="operator==">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::operator==::str" name="str">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::operator[]" name="operator[]">
    <return>
      <type name="container_type" qualifier=" &amp;" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray::container_type" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::operator[]::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::operator[]" name="operator[]">
    <return>
      <type name="container_type" qualifier=" const &amp;" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray::container_type" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::operator[]::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::pointer" name="pointer">
    <return>
      <type name="container_type" qualifier=" const *" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray::container_type" />
    </return>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::pointer" name="pointer">
    <return>
      <type name="container_type" qualifier="*" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray::container_type" />
    </return>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::Reserve" name="Reserve" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::Reserve::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::Resize" name="Resize">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::Resize::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::size" name="size">
    <return>
      <type name="size_t" qualifier=" const &amp;" />
    </return>
  </method>
  <method id="fetch::byte_array::ReferencedByteArray::SubArray" name="SubArray">
    <return>
      <type name="ReferencedByteArray" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
    </return>
    <argument id="fetch::byte_array::ReferencedByteArray::SubArray::start" name="start">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::byte_array::ReferencedByteArray::SubArray::length" name="length">
      <type name="size_t" />
    </argument>
  </method>
</class>
