<?xml version='1.0' encoding='utf-8'?>
<class id="fetch::script::Function" name="Function" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <struct name="Operation" ref="fetch::script::Function::Operation#fetch::script::Function::Operation" />
  <enum anonymous="yes" id="fetch::script::Function::FunctionOperation" name="FunctionOperation">
    <enumvalue id="fetch::script::Function::FO_SEQUENCE" name="FO_SEQUENCE" value="100" />
    <enumvalue id="fetch::script::Function::FO_STATEMENT" name="FO_STATEMENT" value="101" />
    <enumvalue id="fetch::script::Function::FO_VARIANT_CONSTANT" name="FO_VARIANT_CONSTANT" value="102" />
    <enumvalue id="fetch::script::Function::FO_VARIANT" name="FO_VARIANT" value="103" />
    <enumvalue id="fetch::script::Function::FO_ADD" name="FO_ADD" value="104" />
    <enumvalue id="fetch::script::Function::FO_SUBTRACT" name="FO_SUBTRACT" value="105" />
    <enumvalue id="fetch::script::Function::FO_MULTIPLICATION" name="FO_MULTIPLICATION" value="106" />
    <enumvalue id="fetch::script::Function::FO_DIVISION" name="FO_DIVISION" value="107" />
    <enumvalue id="fetch::script::Function::FO_REMAINDER" name="FO_REMAINDER" value="108" />
    <enumvalue id="fetch::script::Function::FO_LOGIC_AND" name="FO_LOGIC_AND" value="109" />
    <enumvalue id="fetch::script::Function::FO_LOGIC_OR" name="FO_LOGIC_OR" value="110" />
    <enumvalue id="fetch::script::Function::FO_LOGIC_NOT" name="FO_LOGIC_NOT" value="111" />
    <enumvalue id="fetch::script::Function::FO_BITWISE_AND" name="FO_BITWISE_AND" value="112" />
    <enumvalue id="fetch::script::Function::FO_BITWISE_OR" name="FO_BITWISE_OR" value="113" />
    <enumvalue id="fetch::script::Function::FO_BITWISE_XOR" name="FO_BITWISE_XOR" value="114" />
    <enumvalue id="fetch::script::Function::FO_BITWISE_NEG" name="FO_BITWISE_NEG" value="115" />
    <enumvalue id="fetch::script::Function::FO_ASSIGN" name="FO_ASSIGN" value="116" />
    <enumvalue id="fetch::script::Function::FO_ASSIGN_ADD" name="FO_ASSIGN_ADD" value="117" />
    <enumvalue id="fetch::script::Function::FO_ASSIGN_SUBTRACT" name="FO_ASSIGN_SUBTRACT" value="118" />
    <enumvalue id="fetch::script::Function::FO_ASSIGN_DIVIDE" name="FO_ASSIGN_DIVIDE" value="119" />
    <enumvalue id="fetch::script::Function::FO_ASSIGN_MULTIPLICATION" name="FO_ASSIGN_MULTIPLICATION" value="120" />
    <enumvalue id="fetch::script::Function::FO_LT" name="FO_LT" value="121" />
    <enumvalue id="fetch::script::Function::FO_LTE" name="FO_LTE" value="122" />
    <enumvalue id="fetch::script::Function::FO_GTE" name="FO_GTE" value="123" />
    <enumvalue id="fetch::script::Function::FO_GT" name="FO_GT" value="124" />
    <enumvalue id="fetch::script::Function::FO_EQUAL" name="FO_EQUAL" value="125" />
    <enumvalue id="fetch::script::Function::FO_NOT_EQUAL" name="FO_NOT_EQUAL" value="126" />
    <enumvalue id="fetch::script::Function::FO_MEMBER_ACCESS" name="FO_MEMBER_ACCESS" value="127" />
    <enumvalue id="fetch::script::Function::FO_CONTEXT" name="FO_CONTEXT" value="128" />
    <enumvalue id="fetch::script::Function::FO_PARENTHESIS" name="FO_PARENTHESIS" value="129" />
    <enumvalue id="fetch::script::Function::FO_INDEX" name="FO_INDEX" value="130" />
  </enum>
  <enum anonymous="yes" id="fetch::script::Function::Type" name="Type">
    <enumvalue id="fetch::script::Function::F_CONTEXT_START" name="F_CONTEXT_START" value="100" />
    <enumvalue id="fetch::script::Function::F_CONTEXT_END" name="F_CONTEXT_END" value="101" />
    <enumvalue id="fetch::script::Function::F_KEYWORD" name="F_KEYWORD" value="103" />
    <enumvalue id="fetch::script::Function::F_TOKEN" name="F_TOKEN" value="104" />
    <enumvalue id="fetch::script::Function::F_BYTE_ARRAY" name="F_BYTE_ARRAY" value="105" />
    <enumvalue id="fetch::script::Function::F_INTEGER" name="F_INTEGER" value="106" />
    <enumvalue id="fetch::script::Function::F_FLOAT" name="F_FLOAT" value="107" />
    <enumvalue id="fetch::script::Function::F_SYNTAX" name="F_SYNTAX" value="504" />
    <enumvalue id="fetch::script::Function::F_OPERATOR" name="F_OPERATOR" value="505" />
    <enumvalue id="fetch::script::Function::F_WHITESPACE" name="F_WHITESPACE" value="506" />
    <enumvalue id="fetch::script::Function::F_CATCH_ALL" name="F_CATCH_ALL" value="507" />
  </enum>
  <field id="fetch::script::Function::operations_" name="operations_">
    <type name="std::__1::vector&lt;fetch::script::Function::Operation, std::__1::allocator&lt;fetch::script::Function::Operation&gt; &gt;" />
  </field>
  <field id="fetch::script::Function::stack_" name="stack_">
    <type name="std::__1::vector&lt;fetch::script::Variant, std::__1::allocator&lt;fetch::script::Variant&gt; &gt;" />
  </field>
  <field id="fetch::script::Function::context_" name="context_">
    <type name="std::__1::vector&lt;fetch::script::Variant, std::__1::allocator&lt;fetch::script::Variant&gt; &gt;" />
  </field>
  <typedef id="fetch::script::Function::byte_array_type" name="byte_array_type">
    <type name="byte_array::Token" />
  </typedef>
  <typedef id="fetch::script::Function::register_type" name="register_type">
    <type name="Variant" ref="fetch::script::Variant#fetch::script::Variant" />
  </typedef>
  <constructor id="fetch::script::Function::Function" name="Function" />
  <method id="fetch::script::Function::BuildFunctionSubtree" name="BuildFunctionSubtree" static="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::script::Function::BuildFunctionSubtree::tokenizer" name="tokenizer">
      <type name="byte_array::Tokenizer" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::script::Function::BuildFunctionSubtree::tree" name="tree">
      <type name="AbstractSyntaxTree" qualifier=" &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree" />
    </argument>
    <argument id="fetch::script::Function::BuildFunctionSubtree::i" name="i">
      <type name="size_t" qualifier=" &amp;" />
    </argument>
  </method>
  <method id="fetch::script::Function::BuildFunctionTree" name="BuildFunctionTree" static="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::script::Function::BuildFunctionTree::tokenizer" name="tokenizer">
      <type name="byte_array::Tokenizer" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::script::Function::BuildFunctionTree::tree" name="tree">
      <type name="AbstractSyntaxTree" qualifier=" &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree" />
    </argument>
    <argument id="fetch::script::Function::BuildFunctionTree::i" name="i">
      <type name="size_t" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::script::Function::BuildFunctionTree::context_parans" name="context_parans">
      <type name="size_t" />
    </argument>
  </method>
  <method id="fetch::script::Function::Clear" name="Clear">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::script::Function::ConfigureAST" name="ConfigureAST" static="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::script::Function::ConfigureAST::tree" name="tree">
      <type name="AbstractSyntaxTree" qualifier=" &amp;" ref="fetch::script::AbstractSyntaxTree#fetch::script::AbstractSyntaxTree" />
    </argument>
  </method>
  <method id="fetch::script::Function::ConfigureTokenizer" name="ConfigureTokenizer" static="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::script::Function::ConfigureTokenizer::tokenizer" name="tokenizer">
      <type name="byte_array::Tokenizer" qualifier=" &amp;" />
    </argument>
    <argument id="fetch::script::Function::ConfigureTokenizer::space" name="space">
      <type name="byte_array_type" qualifier=" const &amp;" ref="fetch::script::Function#fetch::script::Function::byte_array_type" />
    </argument>
  </method>
  <method id="fetch::script::Function::operator()" name="operator()">
    <return>
      <type name="Variant" ref="fetch::script::Variant#fetch::script::Variant" />
    </return>
  </method>
  <method id="fetch::script::Function::PushOperation" name="PushOperation">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::script::Function::PushOperation::op" name="op">
      <type name="Operation" ref="fetch::script::Function::Operation#fetch::script::Function::Operation" />
    </argument>
  </method>
  <method id="fetch::script::Function::size" name="size">
    <return>
      <type name="size_t" />
    </return>
  </method>
</class>
