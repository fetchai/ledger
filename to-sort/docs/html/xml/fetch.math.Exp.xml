<?xml version='1.0' encoding='utf-8'?>
<classtemplate abstract="true" id="fetch::math::Exp" name="Exp" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatenontypeparameter id="fetch::math::Exp::N" name="N">
    <type name="uint8_t" />
  </templatenontypeparameter>
  <templatenontypeparameter id="fetch::math::Exp::C" name="C">
    <type name="uint64_t" />
  </templatenontypeparameter>
  <templatenontypeparameter id="fetch::math::Exp::O" name="O">
    <type builtin="yes" name="bool" />
  </templatenontypeparameter>
  <constructor abstract="yes" id="fetch::math::Exp::Exp&lt;N, C, O&gt;" name="Exp&lt;N, C, O&gt;">
    <argument id="fetch::math::Exp::Exp&lt;N, C, O&gt;::other" name="other">
      <type name="Exp" qualifier=" const &amp;" ref="fetch::math::Exp#fetch::math::Exp" />
    </argument>
  </constructor>
  <method abstract="yes" id="fetch::math::Exp::operator=" name="operator=">
    <return>
      <type name="Exp" ref="fetch::math::Exp#fetch::math::Exp" />
    </return>
    <argument id="fetch::math::Exp::operator=::other" name="other">
      <type name="Exp" qualifier=" const &amp;" ref="fetch::math::Exp#fetch::math::Exp" />
    </argument>
  </method>
  <constructor id="fetch::math::Exp::Exp&lt;N, C, O&gt;" name="Exp&lt;N, C, O&gt;" />
  <methodtemplate id="fetch::math::Exp::operator()" name="operator()">
    <return>
      <type builtin="yes" name="double" />
    </return>
    <argument id="fetch::math::Exp::operator()::x" name="x">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::math::Exp::operator()::T" name="T" />
  </methodtemplate>
  <method id="fetch::math::Exp::SetCoefficient" name="SetCoefficient">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::math::Exp::SetCoefficient::c" name="c">
      <type builtin="yes" name="double" qualifier=" const &amp;" />
    </argument>
  </method>
</classtemplate>
