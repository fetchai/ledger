<?xml version='1.0' encoding='utf-8'?>
<class id="fetch::service::Protocol" name="Protocol" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> A class that defines a generic protocol.</brief>
  <doc>This class is used for defining a general protocol with
remote-function-calls (SERVICEs) and data feeds. The SERVICEs are defined
from a C++ function signature using any sub class of
<ref ref="fetch::service::AbstractCallable#fetch::service::AbstractCallable">fetch::service::AbstractCallable</ref> including <ref ref="fetch::service::Function#fetch::service::Function">fetch::service::Function</ref> and <ref ref="fetch::service::Function#fetch::service::Function">fetch::service::Function</ref> and
<ref ref="fetch::service::CallableClassMember#fetch::service::CallableClassMember">fetch::service::CallableClassMember</ref>. The feeds are available from any
functionality implementation that sub-classes
<ref ref="fetch::service::HasPublicationFeed#fetch::service::HasPublicationFeed">fetch::service::HasPublicationFeed</ref>.

A current limitation of the implementation is that there is only
support for 256 SERVICE functions. It the next version of this class,
this should be changed to be variable and allocated at construction
time (TODO).
</doc>
  <typedef id="fetch::service::Protocol::byte_array_type" name="byte_array_type">
    <type name="byte_array::ConstByteArray" />
  </typedef>
  <typedef id="fetch::service::Protocol::callable_type" name="callable_type">
    <type name="AbstractCallable" ref="fetch::service::AbstractCallable#fetch::service::AbstractCallable" />
  </typedef>
  <method id="fetch::service::Protocol::Expose" name="Expose">
    <brief> Exposes a function or class member function.</brief>
    <doc>The pointer provided is used to invoke the callable when a call
matching the identifier is recieved by a service.

In the next implementation of this, one should use unique_ptr
rather than a raw pointer. This will have no impact on the rest of
the code as it is always a reference return and not the raw pointer
(TODO).
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::Protocol::Expose::n" name="n">
      <doc>is a unique identifier for the callable being exposed</doc>
      <type name="function_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::function_handler_type" />
    </argument>
    <argument id="fetch::service::Protocol::Expose::fnc" name="fnc">
      <doc>is a pointer to the callable function.</doc>
      <type name="callable_type" qualifier="*" ref="fetch::service::Protocol#fetch::service::Protocol::callable_type" />
    </argument>
  </method>
  <method id="fetch::service::Protocol::feeds" name="feeds">
    <brief> Access memeber to the feeds in the protocol.</brief>
    <return>
      <doc>a reference to the feeds.</doc>
      <type name="std::__1::vector&lt;std::__1::shared_ptr&lt;fetch::service::FeedSubscriptionManager&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;fetch::service::FeedSubscriptionManager&gt; &gt; &gt;" qualifier=" &amp;" />
    </return>
  </method>
  <method id="fetch::service::Protocol::operator[]" name="operator[]">
    <brief> Operator to access the different functions in the protocol.</brief>
    <doc>The result of this operator is a <ref ref="fetch::service::Protocol#fetch::service::Protocol::callable_type">fetch::service::Protocol::callable_type</ref> that can be
invoked in accodance with the definition of an
<ref ref="fetch::service::AbstractCallable#fetch::service::AbstractCallable">fetch::service::AbstractCallable</ref>.

This operator throws a &amp;lt;SerializableException&amp;gt; if the index is

</doc>
    <return>
      <doc>a reference to the call.</doc>
      <type name="callable_type" qualifier=" &amp;" ref="fetch::service::Protocol#fetch::service::Protocol::callable_type" />
    </return>
    <argument id="fetch::service::Protocol::operator[]::n" name="n">
      <doc>is the idnex of callable in the protocol.</doc>
      <type name="function_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::function_handler_type" />
    </argument>
  </method>
  <method id="fetch::service::Protocol::RegisterFeed" name="RegisterFeed">
    <brief> Registers a feed from an implementation.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::Protocol::RegisterFeed::feed" name="feed">
      <doc>is the unique feed identifier.</doc>
      <type name="feed_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::feed_handler_type" />
    </argument>
    <argument id="fetch::service::Protocol::RegisterFeed::publisher" name="publisher">
      <doc>is a class that subclasses <ref ref="fetch::service::AbstractPublicationFeed#fetch::service::AbstractPublicationFeed">fetch::service::AbstractPublicationFeed</ref>.</doc>
      <type name="AbstractPublicationFeed" qualifier="*" ref="fetch::service::AbstractPublicationFeed#fetch::service::AbstractPublicationFeed" />
    </argument>
  </method>
  <method id="fetch::service::Protocol::Subscribe" name="Subscribe">
    <brief> Subscribe client to feed.</brief>
    <doc>This function is intended to be used by the service to subscribe
its clients to the feed.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::Protocol::Subscribe::client" name="client">
      <doc>is the client id.</doc>
      <type name="uint64_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::service::Protocol::Subscribe::feed" name="feed">
      <doc>is the feed identifier.</doc>
      <type name="feed_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::feed_handler_type" />
    </argument>
    <argument id="fetch::service::Protocol::Subscribe::id" name="id">
      <doc>is the subscription id allocated on the client side.</doc>
      <type name="subscription_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::subscription_handler_type" />
    </argument>
  </method>
  <method id="fetch::service::Protocol::Unsubscribe" name="Unsubscribe">
    <brief> Unsubscribe client to feed.</brief>
    <doc>This function is intended to be used by the service to unsubscribe
its clients to the feed.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::Protocol::Unsubscribe::client" name="client">
      <doc>is the client id.</doc>
      <type name="uint64_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::service::Protocol::Unsubscribe::feed" name="feed">
      <doc>is the feed identifier.</doc>
      <type name="feed_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::feed_handler_type" />
    </argument>
    <argument id="fetch::service::Protocol::Unsubscribe::id" name="id">
      <doc>is the subscription id allocated on the client side.</doc>
      <type name="subscription_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::subscription_handler_type" />
    </argument>
  </method>
</class>
