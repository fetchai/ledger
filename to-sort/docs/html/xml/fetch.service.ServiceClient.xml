<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fetch::service::ServiceClient" name="ServiceClient" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <base access="public">
    <type name="" />
  </base>
  <base access="public">
    <type name="ServiceClientInterface" ref="fetch::service::ServiceClientInterface#fetch::service::ServiceClientInterface" />
  </base>
  <base access="public">
    <type name="ServiceServerInterface" ref="fetch::service::ServiceServerInterface#fetch::service::ServiceServerInterface" />
  </base>
  <templatetypeparameter id="fetch::service::ServiceClient::T" name="T" />
  <typedef id="fetch::service::ServiceClient::super_type" name="super_type">
    <type name="T" />
  </typedef>
  <typedef id="fetch::service::ServiceClient::thread_manager_type" name="thread_manager_type">
    <type name="ServiceClient&lt;T&gt;::super_type" ref="fetch::service::ServiceClient#fetch::service::ServiceClient::super_type" />
  </typedef>
  <typedef id="fetch::service::ServiceClient::thread_manager_ptr_type" name="thread_manager_ptr_type">
    <type name="ServiceClient&lt;T&gt;::super_type" ref="fetch::service::ServiceClient#fetch::service::ServiceClient::super_type" />
  </typedef>
  <typedef id="fetch::service::ServiceClient::event_handle_type" name="event_handle_type">
    <type name="ServiceClient&lt;T&gt;::thread_manager_type" ref="fetch::service::ServiceClient#fetch::service::ServiceClient::thread_manager_type" />
  </typedef>
  <constructor id="fetch::service::ServiceClient::ServiceClient&lt;T&gt;" name="ServiceClient&lt;T&gt;">
    <argument id="fetch::service::ServiceClient::ServiceClient&lt;T&gt;::host" name="host">
      <type name="std::__1::string" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::service::ServiceClient::ServiceClient&lt;T&gt;::port" name="port">
      <type name="uint16_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::service::ServiceClient::ServiceClient&lt;T&gt;::thread_manager" name="thread_manager">
      <type name="ServiceClient&lt;T&gt;::thread_manager_ptr_type" ref="fetch::service::ServiceClient#fetch::service::ServiceClient::thread_manager_ptr_type" />
    </argument>
  </constructor>
  <destructor id="fetch::service::ServiceClient::~ServiceClient&lt;T&gt;" name="~ServiceClient&lt;T&gt;" virtual="yes" />
  <method id="fetch::service::ServiceClient::PushMessage" name="PushMessage">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::ServiceClient::PushMessage::msg" name="msg">
      <type name="network::message_type" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::service::ServiceClient::ConnectionFailed" name="ConnectionFailed">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method access="protected" id="fetch::service::ServiceClient::DeliverRequest" name="DeliverRequest" override="yes" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::ServiceClient::DeliverRequest::msg" name="msg">
      <type name="network::message_type" qualifier=" const &amp;" />
    </argument>
    <override name="ServiceClientInterface::DeliverRequest" ref="fetch::service::ServiceClientInterface#fetch::service::ServiceClientInterface::DeliverRequest" />
  </method>
  <method access="protected" id="fetch::service::ServiceClient::DeliverResponse" name="DeliverResponse" override="yes" virtual="yes">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::service::ServiceClient::DeliverResponse::" name="">
      <type name="ServiceServerInterface::handle_type" ref="fetch::service::ServiceServerInterface#fetch::service::ServiceServerInterface::handle_type" />
    </argument>
    <argument id="fetch::service::ServiceClient::DeliverResponse::msg" name="msg">
      <type name="network::message_type" qualifier=" const &amp;" />
    </argument>
    <override name="ServiceServerInterface::DeliverResponse" ref="fetch::service::ServiceServerInterface#fetch::service::ServiceServerInterface::DeliverResponse" />
  </method>
</classtemplate>
