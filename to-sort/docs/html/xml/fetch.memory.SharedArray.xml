<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fetch::memory::SharedArray" name="SharedArray" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatetypeparameter id="fetch::memory::SharedArray::T" name="T" />
  <typedef id="fetch::memory::SharedArray::size_type" name="size_type">
    <type name="std::__1::shared_ptr&lt;unsigned long&gt;" />
  </typedef>
  <typedef id="fetch::memory::SharedArray::data_type" name="data_type">
    <type name="std::__1::shared_ptr&lt;_Tp&gt;" />
  </typedef>
  <typedef id="fetch::memory::SharedArray::iterator" name="iterator">
    <type name="ForwardIterator&lt;T&gt;" ref="fetch::memory::ForwardIterator#fetch::memory::ForwardIterator" />
  </typedef>
  <typedef id="fetch::memory::SharedArray::reverse_iterator" name="reverse_iterator">
    <type name="BackwardIterator&lt;T&gt;" ref="fetch::memory::BackwardIterator#fetch::memory::BackwardIterator" />
  </typedef>
  <typedef id="fetch::memory::SharedArray::self_type" name="self_type">
    <type name="SharedArray" ref="fetch::memory::SharedArray#fetch::memory::SharedArray" />
  </typedef>
  <typedef id="fetch::memory::SharedArray::type" name="type">
    <type name="T" />
  </typedef>
  <enum anonymous="yes" id="fetch::memory::SharedArray::(anonymous::1)" name="(anonymous::1)">
    <enumvalue id="fetch::memory::SharedArray::E_SIMD_SIZE" name="E_SIMD_SIZE" value="0" />
    <enumvalue id="fetch::memory::SharedArray::E_SIMD_COUNT" name="E_SIMD_COUNT" value="0" />
    <enumvalue id="fetch::memory::SharedArray::E_LOG_SIMD_COUNT" name="E_LOG_SIMD_COUNT" value="0" />
  </enum>
  <constructor id="fetch::memory::SharedArray::SharedArray&lt;T&gt;" name="SharedArray&lt;T&gt;">
    <argument id="fetch::memory::SharedArray::SharedArray&lt;T&gt;::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::memory::SharedArray::SharedArray&lt;T&gt;" name="SharedArray&lt;T&gt;" />
  <constructor id="fetch::memory::SharedArray::SharedArray&lt;T&gt;" name="SharedArray&lt;T&gt;">
    <argument id="fetch::memory::SharedArray::SharedArray&lt;T&gt;::other" name="other">
      <type name="SharedArray" qualifier=" const &amp;" ref="fetch::memory::SharedArray#fetch::memory::SharedArray" />
    </argument>
  </constructor>
  <constructor id="fetch::memory::SharedArray::SharedArray&lt;T&gt;" name="SharedArray&lt;T&gt;">
    <argument id="fetch::memory::SharedArray::SharedArray&lt;T&gt;::other" name="other">
      <type name="SharedArray&lt;T&gt; &amp;&amp;" />
    </argument>
  </constructor>
  <method id="fetch::memory::SharedArray::operator=" name="operator=">
    <return>
      <type name="SharedArray" qualifier=" &amp;" ref="fetch::memory::SharedArray#fetch::memory::SharedArray" />
    </return>
    <argument id="fetch::memory::SharedArray::operator=::other" name="other">
      <type name="SharedArray&lt;T&gt; &amp;&amp;" />
    </argument>
  </method>
  <destructor id="fetch::memory::SharedArray::~SharedArray&lt;T&gt;" name="~SharedArray&lt;T&gt;" />
  <method id="fetch::memory::SharedArray::begin" name="begin">
    <return>
      <type name="SharedArray&lt;T&gt;::iterator" ref="fetch::memory::SharedArray#fetch::memory::SharedArray::iterator" />
    </return>
  </method>
  <method id="fetch::memory::SharedArray::end" name="end">
    <return>
      <type name="SharedArray&lt;T&gt;::iterator" ref="fetch::memory::SharedArray#fetch::memory::SharedArray::iterator" />
    </return>
  </method>
  <method id="fetch::memory::SharedArray::rbegin" name="rbegin">
    <return>
      <type name="SharedArray&lt;T&gt;::reverse_iterator" ref="fetch::memory::SharedArray#fetch::memory::SharedArray::reverse_iterator" />
    </return>
  </method>
  <method id="fetch::memory::SharedArray::rend" name="rend">
    <return>
      <type name="SharedArray&lt;T&gt;::reverse_iterator" ref="fetch::memory::SharedArray#fetch::memory::SharedArray::reverse_iterator" />
    </return>
  </method>
  <method id="fetch::memory::SharedArray::operator[]" name="operator[]">
    <return>
      <type name="T" qualifier=" &amp;" />
    </return>
    <argument id="fetch::memory::SharedArray::operator[]::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SharedArray::operator[]" name="operator[]">
    <return>
      <type name="const T" qualifier=" const &amp;" />
    </return>
    <argument id="fetch::memory::SharedArray::operator[]::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SharedArray::At" name="At">
    <return>
      <type name="T" qualifier=" &amp;" />
    </return>
    <argument id="fetch::memory::SharedArray::At::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SharedArray::At" name="At">
    <return>
      <type name="const T" qualifier=" const &amp;" />
    </return>
    <argument id="fetch::memory::SharedArray::At::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SharedArray::Set" name="Set">
    <return>
      <type name="const T" qualifier=" const &amp;" />
    </return>
    <argument id="fetch::memory::SharedArray::Set::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SharedArray::Set::v" name="v">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SharedArray::operator=" name="operator=">
    <return>
      <type name="SharedArray&lt;T&gt;::self_type" qualifier=" &amp;" ref="fetch::memory::SharedArray#fetch::memory::SharedArray::self_type" />
    </return>
    <argument id="fetch::memory::SharedArray::operator=::other" name="other">
      <type name="SharedArray" qualifier=" const &amp;" ref="fetch::memory::SharedArray#fetch::memory::SharedArray" />
    </argument>
  </method>
  <method id="fetch::memory::SharedArray::simd_size" name="simd_size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::memory::SharedArray::size" name="size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::memory::SharedArray::padded_size" name="padded_size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::memory::SharedArray::pointer" name="pointer">
    <return>
      <type name="SharedArray&lt;T&gt;::type" qualifier="*" ref="fetch::memory::SharedArray#fetch::memory::SharedArray::type" />
    </return>
  </method>
</classtemplate>
