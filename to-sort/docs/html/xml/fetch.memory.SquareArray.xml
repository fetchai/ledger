<?xml version='1.0' encoding='utf-8'?>
<classtemplate abstract="true" id="fetch::memory::SquareArray" name="SquareArray" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatetypeparameter id="fetch::memory::SquareArray::T" name="T" />
  <typedef id="fetch::memory::SquareArray::type" name="type">
    <type name="T" />
  </typedef>
  <typedef id="fetch::memory::SquareArray::container_type" name="container_type">
    <type name="SharedArray&lt;T&gt;" ref="fetch::memory::SharedArray#fetch::memory::SharedArray" />
  </typedef>
  <typedef id="fetch::memory::SquareArray::iterator" name="iterator">
    <type name="SquareArray&lt;T&gt;::container_type" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::container_type" />
  </typedef>
  <typedef id="fetch::memory::SquareArray::reverse_iterator" name="reverse_iterator">
    <type name="SquareArray&lt;T&gt;::container_type" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::container_type" />
  </typedef>
  <constructor id="fetch::memory::SquareArray::SquareArray&lt;T&gt;" name="SquareArray&lt;T&gt;" />
  <constructor id="fetch::memory::SquareArray::SquareArray&lt;T&gt;" name="SquareArray&lt;T&gt;">
    <argument id="fetch::memory::SquareArray::SquareArray&lt;T&gt;::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::memory::SquareArray::SquareArray&lt;T&gt;" name="SquareArray&lt;T&gt;">
    <argument id="fetch::memory::SquareArray::SquareArray&lt;T&gt;::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::SquareArray&lt;T&gt;::m" name="m">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor abstract="yes" id="fetch::memory::SquareArray::SquareArray&lt;T&gt;" name="SquareArray&lt;T&gt;">
    <argument id="fetch::memory::SquareArray::SquareArray&lt;T&gt;::other" name="other">
      <type name="SquareArray&lt;T&gt; &amp;&amp;" />
    </argument>
  </constructor>
  <constructor abstract="yes" id="fetch::memory::SquareArray::SquareArray&lt;T&gt;" name="SquareArray&lt;T&gt;">
    <argument id="fetch::memory::SquareArray::SquareArray&lt;T&gt;::other" name="other">
      <type name="SquareArray" qualifier=" const &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray" />
    </argument>
  </constructor>
  <method abstract="yes" id="fetch::memory::SquareArray::operator=" name="operator=">
    <return>
      <type name="SquareArray" qualifier=" &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray" />
    </return>
    <argument id="fetch::memory::SquareArray::operator=::other" name="other">
      <type name="SquareArray" qualifier=" const &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray" />
    </argument>
  </method>
  <method abstract="yes" id="fetch::memory::SquareArray::operator=" name="operator=">
    <return>
      <type name="SquareArray" qualifier=" &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray" />
    </return>
    <argument id="fetch::memory::SquareArray::operator=::other" name="other">
      <type name="SquareArray&lt;T&gt; &amp;&amp;" />
    </argument>
  </method>
  <destructor id="fetch::memory::SquareArray::~SquareArray&lt;T&gt;" name="~SquareArray&lt;T&gt;" />
  <method id="fetch::memory::SquareArray::Copy" name="Copy">
    <return>
      <type name="SquareArray" ref="fetch::memory::SquareArray#fetch::memory::SquareArray" />
    </return>
  </method>
  <method id="fetch::memory::SquareArray::Crop" name="Crop">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::memory::SquareArray::Crop::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Crop::j" name="j">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Crop::h" name="h">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Crop::w" name="w">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::Rotate" name="Rotate">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::memory::SquareArray::Rotate::radians" name="radians">
      <type builtin="yes" name="double" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Rotate::fill" name="fill">
      <type name="SquareArray&lt;T&gt;::type" qualifier=" const" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::type" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::Rotate" name="Rotate">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::memory::SquareArray::Rotate::radians" name="radians">
      <type builtin="yes" name="double" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Rotate::ci" name="ci">
      <type builtin="yes" name="double" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Rotate::cj" name="cj">
      <type builtin="yes" name="double" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Rotate::fill" name="fill">
      <type name="SquareArray&lt;T&gt;::type" qualifier=" const" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::type" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::operator==" name="operator==">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::memory::SquareArray::operator==::other" name="other">
      <type name="SquareArray" qualifier=" const &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::operator!=" name="operator!=">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::memory::SquareArray::operator!=::other" name="other">
      <type name="SquareArray" qualifier=" const &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::operator[]" name="operator[]">
    <return>
      <type name="SquareArray&lt;T&gt;::type" qualifier=" const &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::type" />
    </return>
    <argument id="fetch::memory::SquareArray::operator[]::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::operator[]" name="operator[]">
    <return>
      <type name="SquareArray&lt;T&gt;::type" qualifier=" &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::type" />
    </return>
    <argument id="fetch::memory::SquareArray::operator[]::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::operator()" name="operator()">
    <return>
      <type name="SquareArray&lt;T&gt;::type" qualifier=" const &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::type" />
    </return>
    <argument id="fetch::memory::SquareArray::operator()::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::operator()::j" name="j">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::operator()" name="operator()">
    <return>
      <type name="SquareArray&lt;T&gt;::type" qualifier=" &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::type" />
    </return>
    <argument id="fetch::memory::SquareArray::operator()::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::operator()::j" name="j">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::At" name="At">
    <return>
      <type name="SquareArray&lt;T&gt;::type" qualifier=" const &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::type" />
    </return>
    <argument id="fetch::memory::SquareArray::At::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::At" name="At">
    <return>
      <type name="SquareArray&lt;T&gt;::type" qualifier=" const &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::type" />
    </return>
    <argument id="fetch::memory::SquareArray::At::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::At::j" name="j">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::At" name="At">
    <return>
      <type name="T" qualifier=" &amp;" />
    </return>
    <argument id="fetch::memory::SquareArray::At::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::At::j" name="j">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::At" name="At">
    <return>
      <type name="T" qualifier=" &amp;" />
    </return>
    <argument id="fetch::memory::SquareArray::At::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::Set" name="Set">
    <return>
      <type name="const T" qualifier=" const &amp;" />
    </return>
    <argument id="fetch::memory::SquareArray::Set::n" name="n">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Set::v" name="v">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::Set" name="Set">
    <return>
      <type name="const T" qualifier=" const &amp;" />
    </return>
    <argument id="fetch::memory::SquareArray::Set::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Set::j" name="j">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Set::v" name="v">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::Resize" name="Resize">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::memory::SquareArray::Resize::hw" name="hw">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::Resize" name="Resize">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::memory::SquareArray::Resize::h" name="h">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Resize::w" name="w">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::Reshape" name="Reshape">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::memory::SquareArray::Reshape::h" name="h">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
    <argument id="fetch::memory::SquareArray::Reshape::w" name="w">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::memory::SquareArray::Flatten" name="Flatten">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="fetch::memory::SquareArray::begin" name="begin">
    <return>
      <type name="SquareArray&lt;T&gt;::iterator" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::iterator" />
    </return>
  </method>
  <method id="fetch::memory::SquareArray::end" name="end">
    <return>
      <type name="SquareArray&lt;T&gt;::iterator" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::iterator" />
    </return>
  </method>
  <method id="fetch::memory::SquareArray::rbegin" name="rbegin">
    <return>
      <type name="SquareArray&lt;T&gt;::reverse_iterator" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::reverse_iterator" />
    </return>
  </method>
  <method id="fetch::memory::SquareArray::rend" name="rend">
    <return>
      <type name="SquareArray&lt;T&gt;::reverse_iterator" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::reverse_iterator" />
    </return>
  </method>
  <method id="fetch::memory::SquareArray::height" name="height">
    <doc>
TODO: Yet to be implemented

template&amp;lt; typename T&amp;gt;
SqaureArray&amp;lt; T &amp;gt; To() const {

}


void Save(std::byte_array const &amp;filename) {

}

void Load(std::byte_array const &amp;filename) {

}

</doc>
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::memory::SquareArray::width" name="width">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::memory::SquareArray::size" name="size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::memory::SquareArray::data" name="data">
    <return>
      <type name="SquareArray&lt;T&gt;::container_type" qualifier=" &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::container_type" />
    </return>
  </method>
  <method id="fetch::memory::SquareArray::data" name="data">
    <return>
      <type name="SquareArray&lt;T&gt;::container_type" qualifier=" const &amp;" ref="fetch::memory::SquareArray#fetch::memory::SquareArray::container_type" />
    </return>
  </method>
</classtemplate>
