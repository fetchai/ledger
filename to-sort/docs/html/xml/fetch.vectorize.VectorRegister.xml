<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fetch::vectorize::VectorRegister" name="VectorRegister" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <templatetypeparameter id="fetch::vectorize::VectorRegister::T" name="T" />
  <templatenontypeparameter id="fetch::vectorize::VectorRegister::L" name="L">
    <type name="size_t" />
  </templatenontypeparameter>
  <templatenontypeparameter default="InstructionSet::" id="fetch::vectorize::VectorRegister::I" name="I">
    <type name="fetch::vectorize::InstructionSet" ref="fetch::vectorize#fetch::vectorize::InstructionSet" />
  </templatenontypeparameter>
  <typedef id="fetch::vectorize::VectorRegister::type" name="type">
    <type name="T" />
  </typedef>
  <enum anonymous="yes" id="fetch::vectorize::VectorRegister::(anonymous::1)" name="(anonymous::1)">
    <enumvalue id="fetch::vectorize::VectorRegister::E_REGISTER_SIZE" name="E_REGISTER_SIZE" value="0" />
    <enumvalue id="fetch::vectorize::VectorRegister::E_BLOCK_COUNT" name="E_BLOCK_COUNT" value="0" />
  </enum>
  <constructor id="fetch::vectorize::VectorRegister::VectorRegister&lt;T, L, I&gt;" name="VectorRegister&lt;T, L, I&gt;" />
  <constructor id="fetch::vectorize::VectorRegister::VectorRegister&lt;T, L, I&gt;" name="VectorRegister&lt;T, L, I&gt;">
    <argument id="fetch::vectorize::VectorRegister::VectorRegister&lt;T, L, I&gt;::d" name="d">
      <type name="VectorRegister&lt;T, L, I&gt;::type" qualifier=" const *" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister::type" />
    </argument>
  </constructor>
  <constructor id="fetch::vectorize::VectorRegister::VectorRegister&lt;T, L, I&gt;" name="VectorRegister&lt;T, L, I&gt;">
    <argument id="fetch::vectorize::VectorRegister::VectorRegister&lt;T, L, I&gt;::d" name="d">
      <type name="VectorRegister&lt;T, L, I&gt;::type" qualifier=" const &amp;" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister::type" />
    </argument>
  </constructor>
  <constructor id="fetch::vectorize::VectorRegister::VectorRegister&lt;T, L, I&gt;" name="VectorRegister&lt;T, L, I&gt;">
    <argument id="fetch::vectorize::VectorRegister::VectorRegister&lt;T, L, I&gt;::d" name="d">
      <type name="type &amp;&amp;" />
    </argument>
  </constructor>
  <conversionfunction id="fetch::vectorize::VectorRegister::operator type-parameter-0-0" name="operator type-parameter-0-0">
    <return>
      <type name="T" />
    </return>
  </conversionfunction>
  <method id="fetch::vectorize::VectorRegister::operator*" name="operator*">
    <return>
      <type name="VectorRegister" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </return>
    <argument id="fetch::vectorize::VectorRegister::operator*::other" name="other">
      <type name="VectorRegister" qualifier=" const &amp;" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorRegister::operator/" name="operator/">
    <return>
      <type name="VectorRegister" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </return>
    <argument id="fetch::vectorize::VectorRegister::operator/::other" name="other">
      <type name="VectorRegister" qualifier=" const &amp;" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorRegister::operator+" name="operator+">
    <return>
      <type name="VectorRegister" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </return>
    <argument id="fetch::vectorize::VectorRegister::operator+::other" name="other">
      <type name="VectorRegister" qualifier=" const &amp;" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorRegister::operator-" name="operator-">
    <return>
      <type name="VectorRegister" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </return>
    <argument id="fetch::vectorize::VectorRegister::operator-::other" name="other">
      <type name="VectorRegister" qualifier=" const &amp;" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorRegister::operator&amp;" name="operator&amp;">
    <return>
      <type name="VectorRegister" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </return>
    <argument id="fetch::vectorize::VectorRegister::operator&amp;::other" name="other">
      <type name="VectorRegister" qualifier=" const &amp;" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorRegister::operator|" name="operator|">
    <return>
      <type name="VectorRegister" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </return>
    <argument id="fetch::vectorize::VectorRegister::operator|::other" name="other">
      <type name="VectorRegister" qualifier=" const &amp;" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorRegister::operator^" name="operator^">
    <return>
      <type name="VectorRegister" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </return>
    <argument id="fetch::vectorize::VectorRegister::operator^::other" name="other">
      <type name="VectorRegister" qualifier=" const &amp;" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister" />
    </argument>
  </method>
  <method id="fetch::vectorize::VectorRegister::Store" name="Store">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::vectorize::VectorRegister::Store::ptr" name="ptr">
      <type name="VectorRegister&lt;T, L, I&gt;::type" qualifier="*" ref="fetch::vectorize::VectorRegister#fetch::vectorize::VectorRegister::type" />
    </argument>
  </method>
</classtemplate>
