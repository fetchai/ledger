<?xml version='1.0' encoding='utf-8'?>
<class id="fetch::script::Variant" name="Variant" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>FIXME: replace asserts with throwing errors</brief>
  <methodtemplate id="fetch::script::Variant::operator!=" name="operator!=">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::script::Variant::operator!=::v" name="v">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::script::Variant::operator!=::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::script::Variant::operator=" name="operator=">
    <return>
      <type name="typename std::enable_if&lt;std::is_integral&lt;T&gt;::value, T&gt;::type" />
    </return>
    <argument id="fetch::script::Variant::operator=::i" name="i">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::script::Variant::operator=::T" name="T" />
  </methodtemplate>
  <methodtemplate id="fetch::script::Variant::operator=" name="operator=">
    <return>
      <type name="typename std::enable_if&lt;std::is_floating_point&lt;T&gt;::value, T&gt;::type" />
    </return>
    <argument id="fetch::script::Variant::operator=::f" name="f">
      <type name="const T" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="fetch::script::Variant::operator=::T" name="T" />
  </methodtemplate>
  <typedef id="fetch::script::Variant::byte_array_type" name="byte_array_type">
    <type name="byte_array::ReferencedByteArray" ref="fetch::byte_array::ReferencedByteArray#fetch::byte_array::ReferencedByteArray" />
  </typedef>
  <constructor id="fetch::script::Variant::Variant" name="Variant" />
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::i" name="i">
      <type name="int64_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::i" name="i">
      <type name="int32_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::i" name="i">
      <type name="int16_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::i" name="i">
      <type name="uint64_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::i" name="i">
      <type name="uint32_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::i" name="i">
      <type name="uint16_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::f" name="f">
      <type builtin="yes" name="float" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::f" name="f">
      <type builtin="yes" name="double" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::str" name="str">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::str" name="str">
      <type name="byte_array_type" qualifier=" const &amp;" ref="fetch::script::Variant#fetch::script::Variant::byte_array_type" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::c" name="c">
      <type builtin="yes" name="char" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <constructor id="fetch::script::Variant::Variant" name="Variant">
    <argument id="fetch::script::Variant::Variant::arr" name="arr">
      <type name="std::initializer_list&lt;fetch::script::Variant&gt;" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <method id="fetch::script::Variant::as_bool" name="as_bool">
    <return>
      <type builtin="yes" name="bool" qualifier=" const &amp;" />
    </return>
  </method>
  <method id="fetch::script::Variant::as_bool" name="as_bool">
    <return>
      <type builtin="yes" name="bool" qualifier=" &amp;" />
    </return>
  </method>
  <method id="fetch::script::Variant::as_byte_array" name="as_byte_array">
    <return>
      <type name="byte_array_type" qualifier=" const &amp;" ref="fetch::script::Variant#fetch::script::Variant::byte_array_type" />
    </return>
  </method>
  <method id="fetch::script::Variant::as_byte_array" name="as_byte_array">
    <return>
      <type name="byte_array_type" qualifier=" &amp;" ref="fetch::script::Variant#fetch::script::Variant::byte_array_type" />
    </return>
  </method>
  <method id="fetch::script::Variant::as_double" name="as_double">
    <return>
      <type builtin="yes" name="double" qualifier=" const &amp;" />
    </return>
  </method>
  <method id="fetch::script::Variant::as_double" name="as_double">
    <return>
      <type builtin="yes" name="double" qualifier=" &amp;" />
    </return>
  </method>
  <method id="fetch::script::Variant::as_int" name="as_int">
    <return>
      <type name="int64_t" qualifier=" const &amp;" />
    </return>
  </method>
  <method id="fetch::script::Variant::as_int" name="as_int">
    <return>
      <type name="int64_t" qualifier=" &amp;" />
    </return>
  </method>
  <method id="fetch::script::Variant::Copy" name="Copy">
    <return>
      <type name="Variant" ref="fetch::script::Variant#fetch::script::Variant" />
    </return>
  </method>
  <method id="fetch::script::Variant::is_null" name="is_null">
    <return>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method id="fetch::script::Variant::operator=" name="operator=">
    <return>
      <type name="std::initializer_list&lt;fetch::script::Variant&gt;" qualifier=" const &amp;" />
    </return>
    <argument id="fetch::script::Variant::operator=::arr" name="arr">
      <type name="std::initializer_list&lt;fetch::script::Variant&gt;" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::script::Variant::operator=" name="operator=">
    <return>
      <type builtin="yes" name="void" qualifier="*" />
    </return>
    <argument id="fetch::script::Variant::operator=::ptr" name="ptr">
      <type builtin="yes" name="void" qualifier="*" />
    </argument>
  </method>
  <method id="fetch::script::Variant::operator=" name="operator=">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::script::Variant::operator=::b" name="b">
      <type builtin="yes" name="bool" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::script::Variant::operator=" name="operator=">
    <return>
      <type builtin="yes" name="char" qualifier=" const &amp;" />
    </return>
    <argument id="fetch::script::Variant::operator=::c" name="c">
      <type builtin="yes" name="char" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::script::Variant::operator=" name="operator=">
    <return>
      <type name="byte_array_type" ref="fetch::script::Variant#fetch::script::Variant::byte_array_type" />
    </return>
    <argument id="fetch::script::Variant::operator=::s" name="s">
      <type name="byte_array_type" qualifier=" const &amp;" ref="fetch::script::Variant#fetch::script::Variant::byte_array_type" />
    </argument>
  </method>
  <method id="fetch::script::Variant::operator==" name="operator==">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::script::Variant::operator==::str" name="str">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </method>
  <method id="fetch::script::Variant::operator==" name="operator==">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::script::Variant::operator==::v" name="v">
      <type builtin="yes" name="int" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::script::Variant::operator==" name="operator==">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::script::Variant::operator==::v" name="v">
      <type builtin="yes" name="double" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::script::Variant::operator[]" name="operator[]">
    <return>
      <type name="VariantAccessProxy" ref="fetch::script::Variant::VariantAccessProxy#fetch::script::Variant::VariantAccessProxy" />
    </return>
    <argument id="fetch::script::Variant::operator[]::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::script::Variant::operator[]" name="operator[]">
    <return>
      <type name="Variant" qualifier=" const &amp;" ref="fetch::script::Variant#fetch::script::Variant" />
    </return>
    <argument id="fetch::script::Variant::operator[]::i" name="i">
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::script::Variant::size" name="size">
    <return>
      <type name="size_t" />
    </return>
  </method>
  <method id="fetch::script::Variant::type" name="type">
    <return>
      <type name="VariantType" qualifier=" const &amp;" ref="fetch::script#fetch::script::VariantType" />
    </return>
  </method>
</class>
