<?xml version='1.0' encoding='utf-8'?>
<class abstract="true" id="fetch::service::ServiceClientInterface" name="ServiceClientInterface" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <subclass access="public" name="ServiceServer::ClientRPCInterface" ref="fetch::service::ServiceServer::ClientRPCInterface#fetch::service::ServiceServer::ClientRPCInterface">
    <brief>TODO Rename and move</brief>
  </subclass>
  <subclass access="public" name="ServiceClient" ref="fetch::service::ServiceClient#fetch::service::ServiceClient" />
  <methodtemplate id="fetch::service::ServiceClientInterface::Call" name="Call">
    <return>
      <type name="Promise" ref="fetch::service::Promise#fetch::service::Promise" />
    </return>
    <argument id="fetch::service::ServiceClientInterface::Call::protocol" name="protocol">
      <type name="protocol_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::protocol_handler_type" />
    </argument>
    <argument id="fetch::service::ServiceClientInterface::Call::function" name="function">
      <type name="function_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::function_handler_type" />
    </argument>
    <argument id="fetch::service::ServiceClientInterface::Call::args" name="args">
      <type name="arguments..." />
    </argument>
    <templatetypeparameter id="fetch::service::ServiceClientInterface::Call::arguments" name="arguments" />
  </methodtemplate>
  <constructor id="fetch::service::ServiceClientInterface::ServiceClientInterface" name="ServiceClientInterface" />
  <destructor id="fetch::service::ServiceClientInterface::~ServiceClientInterface" name="~ServiceClientInterface" virtual="yes" />
  <method id="fetch::service::ServiceClientInterface::CallWithPackedArguments" name="CallWithPackedArguments">
    <return>
      <type name="Promise" ref="fetch::service::Promise#fetch::service::Promise" />
    </return>
    <argument id="fetch::service::ServiceClientInterface::CallWithPackedArguments::protocol" name="protocol">
      <type name="protocol_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::protocol_handler_type" />
    </argument>
    <argument id="fetch::service::ServiceClientInterface::CallWithPackedArguments::function" name="function">
      <type name="function_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::function_handler_type" />
    </argument>
    <argument id="fetch::service::ServiceClientInterface::CallWithPackedArguments::args" name="args">
      <type name="byte_array::ByteArray" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="fetch::service::ServiceClientInterface::Subscribe" name="Subscribe">
    <return>
      <type name="subscription_handler_type" ref="fetch::service#fetch::service::subscription_handler_type" />
    </return>
    <argument id="fetch::service::ServiceClientInterface::Subscribe::protocol" name="protocol">
      <type name="protocol_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::protocol_handler_type" />
    </argument>
    <argument id="fetch::service::ServiceClientInterface::Subscribe::feed" name="feed">
      <type name="feed_handler_type" qualifier=" const &amp;" ref="fetch::service#fetch::service::feed_handler_type" />
    </argument>
    <argument id="fetch::service::ServiceClientInterface::Subscribe::callback" name="callback">
      <type name="AbstractCallable" qualifier="*" ref="fetch::service::AbstractCallable#fetch::service::AbstractCallable" />
    </argument>
  </method>
  <method id="fetch::service::ServiceClientInterface::Unsubscribe" name="Unsubscribe">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::ServiceClientInterface::Unsubscribe::id" name="id">
      <type name="subscription_handler_type" ref="fetch::service#fetch::service::subscription_handler_type" />
    </argument>
  </method>
  <method access="protected" id="fetch::service::ServiceClientInterface::ClearPromises" name="ClearPromises">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="fetch::service::ServiceClientInterface::DeliverRequest" name="DeliverRequest" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::ServiceClientInterface::DeliverRequest::" name="">
      <type name="network::message_type" qualifier=" const &amp;" />
    </argument>
  </method>
  <method access="protected" id="fetch::service::ServiceClientInterface::ProcessServerMessage" name="ProcessServerMessage">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fetch::service::ServiceClientInterface::ProcessServerMessage::msg" name="msg">
      <type name="network::message_type" qualifier=" const &amp;" />
    </argument>
  </method>
</class>
