<?xml version='1.0' encoding='utf-8'?>
<class id="fetch::service::HasPublicationFeed" name="HasPublicationFeed" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Publication functionality for a single feed.</brief>
  <doc>A class can inherith this functionality to create and publish to
feeds that can then later be added to protocols. Consider a message
passing protocol. In this protocol we would like the underlying
functionality to provide a feed with new messages. This can be done
as follows:

```
enum MessageFeed {
  NEW_MESSAGE = 1
};

class MessageManager : public HasPublicationFeed {
public:
  // ...
  void PushMessage(std::string const &amp;msg) {
     messages_.push_back(msg);
     this-&gt;Publish( MessageFeed::NEW_MESSAGE, msg );
  }
  // ...
};
```

In the protocol definition we can now expose the feed functionality
by using the method <ref ref="fetch::service::Protocol#fetch::service::Protocol::RegisterFeed">fetch::service::Protocol::RegisterFeed</ref>. More concretely, the
implementation of a feed in the protocol is as follows:

```
class NodeProtocol : public NodeFunctionality, public fetch::service::Protocol {
public:
  NodeProtocol() : NodeFunctionality(),  fetch::service::Protocol() {
    using namespace fetch::service;

    // ... SERVICE exposure ...

    this-&gt;RegisterFeed( MessageFeed::NEW_MESSAGE, this  );
  }
};
```

As default 256 feeds are supported, but this can be changed at the
time where the object is constructed.
</doc>
  <base access="public">
    <type name="AbstractPublicationFeed" ref="fetch::service::AbstractPublicationFeed#fetch::service::AbstractPublicationFeed" />
    <brief> Super class for publishers.</brief>
  </base>
  <methodtemplate id="fetch::service::HasPublicationFeed::Publish" name="Publish">
    <brief> Publishes data to a feed.</brief>
    <doc>A class that implements a given functionality would normally
subclass this class and use the this function to publish data. Data
feeds are separated such that one can use them in multiple
protocols. For instance, one could make a UDP feed for new blocks
while having another protocol that would publish messages over TCP.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::HasPublicationFeed::Publish::feed" name="feed">
      <doc>is the to which this is published.</doc>
      <type name="feed_handler_type" ref="fetch::service#fetch::service::feed_handler_type" />
    </argument>
    <argument id="fetch::service::HasPublicationFeed::Publish::args" name="args">
      <doc>is the argument list that will be published.</doc>
      <type name="Args &amp;&amp;..." />
    </argument>
    <templatetypeparameter id="fetch::service::HasPublicationFeed::Publish::Args" name="Args" />
  </methodtemplate>
  <constructor id="fetch::service::HasPublicationFeed::HasPublicationFeed" name="HasPublicationFeed">
    <brief> Constructor for HasPublicationFeed.</brief>
    <argument id="fetch::service::HasPublicationFeed::HasPublicationFeed::n" name="n">
      <doc>is the maximum number of support feeds.</doc>
      <type name="size_t" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <method id="fetch::service::HasPublicationFeed::create_publisher" name="create_publisher" override="yes" virtual="yes">
    <brief> Creates a publish function.</brief>
    <doc>See <ref ref="fetch::service::AbstractPublicationFeed#fetch::service::AbstractPublicationFeed::create_publisher">fetch::service::AbstractPublicationFeed::create_publisher</ref> and <ref ref="fetch::service::AbstractPublicationFeed#fetch::service::AbstractPublicationFeed::create_publisher">fetch::service::AbstractPublicationFeed::create_publisher</ref> for documentation
related to general purpose of this function.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fetch::service::HasPublicationFeed::create_publisher::feed" name="feed">
      <type name="feed_handler_type" ref="fetch::service#fetch::service::feed_handler_type" />
    </argument>
    <argument id="fetch::service::HasPublicationFeed::create_publisher::function" name="function">
      <type name="AbstractPublicationFeed::function_type" ref="fetch::service::AbstractPublicationFeed#fetch::service::AbstractPublicationFeed::function_type" />
    </argument>
    <override name="AbstractPublicationFeed::create_publisher" ref="fetch::service::AbstractPublicationFeed#fetch::service::AbstractPublicationFeed::create_publisher" />
  </method>
</class>
