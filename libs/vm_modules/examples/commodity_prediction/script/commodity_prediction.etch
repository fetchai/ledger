function build_graph(graph: Graph)
// make graph with correct architecture
var dropout_prob = 1.0f;
var input_size = 118;
var first_dense_size = 216;
var second_dense_size = 108;
var output_size = 54;

graph.addPlaceholder("num_input");
graph.addDropout("dropout_0", "num_input", dropout_prob);
graph.addFullyConnected("hidden_dense_1", "dropout_0", input_size, first_dense_size);
graph.addSoftmax("softmax_1", "hidden_dense_1");
graph.addDropout("dropout_1", "softmax_1", dropout_prob);
graph.addFullyConnected("hidden_dense_2", "dropout_1", first_dense_size, second_dense_size);
graph.addSoftmax("softmax_2", "hidden_dense_2");
graph.addDropout("dropout_2", "softmax_2", dropout_prob);
graph.addFullyConnected("output_dense", "dropout_2", second_dense_size, output_size);
graph.addSoftmax("softmax_3", "output_dense");

graph.AddMeanSquareErrorLoss("Error", "softmax_3");

endfunction

function read_weights(graph: Graph)
// read in weights
var file_weights0 = System.Argv(0) +  "/output/keras_aluminium_px_last_us/model_weights/hidden_dense_1/hidden_dense_1_12/kernel:0.csv";
var file_bias0    = System.Argv(0) +  "/output/keras_aluminium_px_last_us/model_weights/hidden_dense_1/hidden_dense_1_12/bias:0.csv";
var file_weights1 = System.Argv(0) +  "/output/keras_aluminium_px_last_us/model_weights/hidden_dense_2/hidden_dense_2_4/kernel:0.csv";
var file_bias1    = System.Argv(0) +  "/output/keras_aluminium_px_last_us/model_weights/hidden_dense_2/hidden_dense_2_4/bias:0.csv";
var file_weights2 = System.Argv(0) +  "/output/keras_aluminium_px_last_us/model_weights/output_dense/output_dense_12/kernel:0.csv";
var file_bias2    = System.Argv(0) +  "/output/keras_aluminium_px_last_us/model_weights/output_dense/output_dense_12/bias:0.csv";

var weights0 = read_csv(file_weights0, true);
var bias0    = read_csv(file_bias0, false);
var weights1 = read_csv(file_weights1, true);
var bias1    = read_csv(file_bias1, false);
var weights2 = read_csv(file_weights2, true);
var bias2    = read_csv(file_bias2, false);

// load weights into graph
var sd = graph.StateDict();
sd.SetWeights("hidden_dense_1" + "_FC_Weights", weights0);
sd.SetWeights("hidden_dense_1" + "_FC_Bias", bias0);
sd.SetWeights("hidden_dense_2" + "_FC_Weights", weights1);
sd.SetWeights("hidden_dense_2" + "_FC_Bias", bias1);
sd.SetWeights("output_dense" + "_FC_Weights", weights2);
sd.SetWeights("output_dense" + "_FC_Bias", bias2);
graph.LoadStateDict(sd);
endfunction

function main()

if (System.Argc() != 3)
  print("Usage: VM SCRIPT_FILE PATH/TO/model_files/ /PATH/TO/input_file.csv /PATH/TO/label_file.csv");
  return;
endif

var loader = DataLoader();
loader.AddData("commodity", System.Argv(1), System.Argv(2));

var graph = Graph();
build_graph(graph);

var testing = true;

if (testing)
    read_weights(graph);

    while(!loader.IsDone())
        var input_data = loader.GetNext();
        graph.SetInput("num_input", input_data.Data());
        var pred = graph.Evaluate("softmax_3");
        print(pred.ToString());
    endwhile
else
    // Set up the optimiser
    var optimiser = AdamOptimiser(graph, "num_input", "softmax_3", "error");

    // Begin the training loop
    var training_iterations = 10;
    var batch_size = 64u64;
    var subset_size = (100u64 * 64u64);
    for(i in 0:training_iterations)
        var loss = optimiser.Run(loader, batch_size, subset_size);
        print("Current Loss: ");
        printLn(loss);
    endfor
endif


endfunction
