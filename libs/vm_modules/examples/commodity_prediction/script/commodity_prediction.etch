function main()

if (System.Argc() != 2)
  print("Usage: VM SCRIPT_FILE PATH/TO/model_files/ /PATH/TO/INPUT/file.csv");
  return;
endif

// var trainingIterations = 1000000;

//var sa = Array<UInt64>(3);
//sa[0] = 28u64;
//sa[1] = 28u64;
//sa[2] = 1u64;
//var sb = Array<UInt64>(2);
//sb[0] = 10u64;
//sb[1] = 1u64;

//var t = Tensor(sa);
//var gt = Tensor(sb);

var loader = CommodityDataLoader();
loader.AddData(System.Argv(1));


//print(loader.GetNext().ToString());  // okay this bit works!
//var p = TrainingPair(gt,t);
//

// mkae graph with correct architecture
var graph = Graph();
var architecture_file = System.Argv(0) + "/architecture.csv";
//var g_ptr = Ptr(graph);

//read_architecture(architecture_file);
read_architecture(architecture_file, graph);
//arch_tuple = read_architecture(architecture_file, g_ptr, model_num);

//graph.AddPlaceholder("Input");
//g.AddDropout()  // more dropout
//g.AddFullyConnected("FC_1", "Input", 118, 216);
//g.AddRelu("Relu_1", "FC_1");
//g.AddFullyConnected("FC_2", "Relu_1", 128, 64);
//g.AddRelu("Relu_2", "FC_2");
//g.AddFullyConnected("FC_3", "Relu_2", 64, 10);
//g.AddSoftmax("Output", "FC_3");

////var average = 0.0f;
////for(i in 0:trainingIterations)
//d.GetData(t);
//g.SetInput("Input", t);
//var pred = g.Evaluate("Output");
////var loss = c.Forward(pred, p.Label());
////    average += loss;
//var remainder = i - (i / 100 * 100);
////if (remainder == 0) // No % operator :(
////      print(average);
//////      average = 0.0f;
////  d.Display(p.Data());
////  print("Expected  : " + p.Label().ToString());
////  print("Predicted : " + pred.ToString());
////endif
//print("prediction: " + pred.ToString());
////var dt = c.Backward(pred, p.Label());
////g.Backpropagate("Softmax", dt);
////g.Step(0.1f);
////endfor
//
endfunction