//------------------------------------------------------------------------------
//
//   Copyright 2018-2019 Fetch.AI Limited
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//------------------------------------------------------------------------------

function build_graph(graph : Graph)

var conv1D_1_filters        = 8;
var conv1D_1_input_channels = 1;
var conv1D_1_kernel_size    = 20;
var conv1D_1_stride         = 3;

var keep_prob = 0.5f;

var conv1D_2_filters        = 1;
var conv1D_2_input_channels = conv1D_1_filters;
var conv1D_2_kernel_size    = 16;
var conv1D_2_stride         = 4;

graph.AddPlaceholder("Input");
graph.AddPlaceholder("Label");
graph.addConv1D("hidden_conv1D_1", "Input", conv1D_1_filters, conv1D_1_input_channels,
                conv1D_1_kernel_size, conv1D_1_stride);
graph.AddRelu("relu", "hidden_conv1D_1");
graph.AddDropout("dropout_1", "relu", keep_prob);
graph.addConv1D("Output", "dropout_1", conv1D_2_filters, conv1D_2_input_channels,
                        conv1D_2_kernel_size, conv1D_2_stride);

endfunction

function main()

if (System.Argc() != 4) print("Usage: VM SCRIPT_FILE PATH/TO/TRAIN_DATA.CSV /PATH/TO/TRAIN_LABEL.CSV PATH/TO/TEST_DATA.CSV /PATH/TO/TEST_LABEL.CSV");
    return;
endif

var input_data = read_csv(System.Argv(0), true);
var input_labels = read_csv(System.Argv(1), true);
var test_data = read_csv(System.Argv(2), true);
var test_labels = read_csv(System.Argv(3), true);

// set up graph
var graph = Graph();
build_graph(graph);

// add loss to graph
graph.addMeanSquareErrorLoss("Error", "Output", "Label");

// Set up the optimiser
var optimiser = AdamOptimiser(graph, "Input", "Label", "Error");

// Begin training
printLn("begin training...");
var training_iterations = 10;
var batch_size = 8u64;
for(i in 0:training_iterations)
    var loss = optimiser.Run(input_data, input_labels, batch_size);
    print("Current Loss: ");
    printLn(loss);
endfor

// Begin testing
printLn("test prediction...");
graph.SetInput("Input", test_data);
var pred = graph.Evaluate("Output");

pred = remove_leading_dimension(pred);

printLn(pred.ToString());

endfunction
