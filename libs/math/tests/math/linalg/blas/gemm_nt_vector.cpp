//------------------------------------------------------------------------------
//
//   Copyright 2018-2019 Fetch.AI Limited
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//------------------------------------------------------------------------------

#include <gtest/gtest.h>

#include "math/linalg/blas/base.hpp"
#include "math/linalg/blas/gemm_nt_vector.hpp"
#include "math/linalg/blas/gemm_nt_vector_threaded.hpp"
#include "math/linalg/matrix.hpp"
#include "math/linalg/prototype.hpp"

using namespace fetch;
using namespace fetch::math::linalg;

TEST(blas_gemm_vectorised, blas_gemm_nt_vector1)
{

  Blas<double,
       Matrix<
           double, fetch::memory::SharedArray<double>,
           fetch::math::RectangularArray<double, fetch::memory::SharedArray<double>, true, false>>,
       Signature(_C <= _alpha, _A, _B, _beta, _C), Computes(_C = _alpha * _A * T(_B) + _beta * _C),
       platform::Parallelisation::VECTORISE>
      gemm_nt_vector;
  // Compuing _C = _alpha * _A * T(_B) + _beta * _C
  using type = double;

  type alpha = type(1);
  type beta  = type(0);

  Matrix<type> A = Matrix<type>(R"(
	0.3745401188473625 0.9507143064099162;
 0.7319939418114051 0.5986584841970366;
 0.15601864044243652 0.15599452033620265
	)");

  Matrix<type> B = Matrix<type>(R"(
	0.05808361216819946 0.8661761457749352;
 0.6011150117432088 0.7080725777960455;
 0.020584494295802447 0.9699098521619943
	)");

  Matrix<type> C = Matrix<type>(R"(
	0.8324426408004217 0.21233911067827616 0.18182496720710062;
 0.18340450985343382 0.3042422429595377 0.5247564316322378;
 0.43194501864211576 0.2912291401980419 0.6118528947223795
	)");

  Matrix<type> R = Matrix<type>(R"(
	0.8452406966637934 0.898316417626484 0.9298168913182975;
 0.5610605507028994 0.8639062030527893 0.5957124870228502;
 0.14418085858929 0.20424058901822734 0.15451218697159372
	)");

  gemm_nt_vector(alpha, A, B, beta, C);

  ASSERT_TRUE(R.AllClose(C));
}

TEST(blas_gemm_vectorised, blas_gemm_nt_vector2)
{

  Blas<double,
       Matrix<
           double, fetch::memory::SharedArray<double>,
           fetch::math::RectangularArray<double, fetch::memory::SharedArray<double>, true, false>>,
       Signature(_C <= _alpha, _A, _B, _beta, _C), Computes(_C = _alpha * _A * T(_B) + _beta * _C),
       platform::Parallelisation::VECTORISE>
      gemm_nt_vector;
  // Compuing _C = _alpha * _A * T(_B) + _beta * _C
  using type = double;

  type alpha = type(0);
  type beta  = type(1);

  Matrix<type> A = Matrix<type>(R"(
	0.13949386065204183 0.29214464853521815;
 0.3663618432936917 0.45606998421703593;
 0.7851759613930136 0.19967378215835974
	)");

  Matrix<type> B = Matrix<type>(R"(
	0.5142344384136116 0.5924145688620425;
 0.046450412719997725 0.6075448519014384;
 0.17052412368729153 0.06505159298527952
	)");

  Matrix<type> C = Matrix<type>(R"(
	0.9488855372533332 0.9656320330745594 0.8083973481164611;
 0.3046137691733707 0.09767211400638387 0.6842330265121569;
 0.4401524937396013 0.12203823484477883 0.4951769101112702
	)");

  Matrix<type> R = Matrix<type>(R"(
	0.9488855372533332 0.9656320330745594 0.8083973481164611;
 0.3046137691733707 0.09767211400638387 0.6842330265121569;
 0.4401524937396013 0.12203823484477883 0.4951769101112702
	)");

  gemm_nt_vector(alpha, A, B, beta, C);

  ASSERT_TRUE(R.AllClose(C));
}

TEST(blas_gemm_vectorised, blas_gemm_nt_vector3)
{

  Blas<double,
       Matrix<
           double, fetch::memory::SharedArray<double>,
           fetch::math::RectangularArray<double, fetch::memory::SharedArray<double>, true, false>>,
       Signature(_C <= _alpha, _A, _B, _beta, _C), Computes(_C = _alpha * _A * T(_B) + _beta * _C),
       platform::Parallelisation::VECTORISE>
      gemm_nt_vector;
  // Compuing _C = _alpha * _A * T(_B) + _beta * _C
  using type = double;

  type alpha = type(1);
  type beta  = type(1);

  Matrix<type> A = Matrix<type>(R"(
	0.034388521115218396 0.9093204020787821;
 0.2587799816000169 0.662522284353982;
 0.31171107608941095 0.5200680211778108
	)");

  Matrix<type> B = Matrix<type>(R"(
	0.5467102793432796 0.18485445552552704;
 0.9695846277645586 0.7751328233611146;
 0.9394989415641891 0.8948273504276488
	)");

  Matrix<type> C = Matrix<type>(R"(
	0.5978999788110851 0.9218742350231168 0.0884925020519195;
 0.1959828624191452 0.045227288910538066 0.32533033076326434;
 0.388677289689482 0.2713490317738959 0.8287375091519293
	)");

  Matrix<type> R = Matrix<type>(R"(
	0.7847924646207151 1.6600609070711796 0.9344852473235857;
 0.45993073459592293 0.809679149854067 1.1612969098822274;
 0.6552298300637807 0.9767010930495218 1.5869608246444562
	)");

  gemm_nt_vector(alpha, A, B, beta, C);

  ASSERT_TRUE(R.AllClose(C));
}

TEST(blas_gemm_vectorised, blas_gemm_nt_vector4)
{

  Blas<double,
       Matrix<
           double, fetch::memory::SharedArray<double>,
           fetch::math::RectangularArray<double, fetch::memory::SharedArray<double>, true, false>>,
       Signature(_C <= _alpha, _A, _B, _beta, _C), Computes(_C = _alpha * _A * T(_B) + _beta * _C),
       platform::Parallelisation::VECTORISE>
      gemm_nt_vector;
  // Compuing _C = _alpha * _A * T(_B) + _beta * _C
  using type = double;

  type alpha = type(0.8339627364523637);
  type beta  = type(0.11885948564478421);

  Matrix<type> A = Matrix<type>(R"(
	0.3567533266935893 0.28093450968738076;
 0.5426960831582485 0.14092422497476265;
 0.8021969807540397 0.07455064367977082
	)");

  Matrix<type> B = Matrix<type>(R"(
	0.9868869366005173 0.7722447692966574;
 0.1987156815341724 0.005522117123602399;
 0.8154614284548342 0.7068573438476171
	)");

  Matrix<type> C = Matrix<type>(R"(
	0.7290071680409873 0.7712703466859457 0.07404465173409036;
 0.3584657285442726 0.11586905952512971 0.8631034258755935;
 0.6232981268275579 0.3308980248526492 0.06355835028602363
	)");

  Matrix<type> R = Matrix<type>(R"(
	0.5611953994914394 0.15208825450844332 0.41702500046255775;
 0.5800190364947763 0.10435752127191673 0.5547301392269602;
 0.7823269693653673 0.17261495836076252 0.5970472158887206
	)");

  gemm_nt_vector(alpha, A, B, beta, C);

  ASSERT_TRUE(R.AllClose(C));
}

TEST(blas_gemm_vectorised, blas_gemm_nt_vector5)
{

  Blas<double,
       Matrix<
           double, fetch::memory::SharedArray<double>,
           fetch::math::RectangularArray<double, fetch::memory::SharedArray<double>, true, false>>,
       Signature(_C <= _alpha, _A, _B, _beta, _C), Computes(_C = _alpha * _A * T(_B) + _beta * _C),
       platform::Parallelisation::VECTORISE>
      gemm_nt_vector;
  // Compuing _C = _alpha * _A * T(_B) + _beta * _C
  using type = double;

  type alpha = type(0.3855758935965724);
  type beta  = type(0.25061414994572606);

  Matrix<type> A = Matrix<type>(R"(
	0.3109823217156622 0.32518332202674705 0.7296061783380641 0.6375574713552131 0.8872127425763265 0.4722149251619493 0.1195942459383017 0.713244787222995 0.7607850486168974 0.5612771975694962 0.770967179954561 0.49379559636439074;
 0.5227328293819941 0.42754101835854963 0.02541912674409519 0.10789142699330445 0.03142918568673425 0.6364104112637804 0.3143559810763267 0.5085706911647028 0.907566473926093 0.24929222914887494 0.41038292303562973 0.7555511385430487;
 0.22879816549162246 0.07697990982879299 0.289751452913768 0.16122128725400442 0.9296976523425731 0.808120379564417 0.6334037565104235 0.8714605901877177 0.8036720768991145 0.18657005888603584 0.8925589984899778 0.5393422419156507;
 0.8074401551640625 0.8960912999234932 0.3180034749718639 0.11005192452767676 0.22793516254194168 0.4271077886262563 0.8180147659224931 0.8607305832563434 0.006952130531190703 0.5107473025775657 0.417411003148779 0.22210781047073025;
 0.1198653673336828 0.33761517140362796 0.9429097039125192 0.32320293202075523 0.5187906217433661 0.7030189588951778 0.363629602379294 0.9717820827209607 0.9624472949421112 0.25178229582536416 0.49724850589238545 0.30087830981676966;
 0.2848404943774676 0.036886947354532795 0.6095643339798968 0.5026790232288615 0.05147875124998935 0.27864646423661144 0.9082658859666537 0.23956189066697242 0.1448948720912231 0.489452760277563 0.9856504541106007 0.2420552715115004;
 0.6721355474058786 0.7616196153287176 0.23763754399239967 0.7282163486118596 0.3677831327192532 0.6323058305935795 0.6335297107608947 0.5357746840747585 0.0902897700544083 0.835302495589238 0.32078006497173583 0.18651851039985423;
 0.040775141554763916 0.5908929431882418 0.6775643618422824 0.016587828927856152 0.512093058299281 0.22649577519793795 0.6451727904094499 0.17436642900499144 0.690937738102466 0.3867353463005374 0.9367299887367345 0.13752094414599325;
 0.3410663510502585 0.11347352124058907 0.9246936182785628 0.877339353380981 0.2579416277151556 0.659984046034179 0.8172222002012158 0.5552008115994623 0.5296505783560065 0.24185229090045168 0.09310276780589921 0.8972157579533268
	)");

  Matrix<type> B = Matrix<type>(R"(
	0.9004180571633305 0.6331014572732679 0.3390297910487007 0.3492095746126609 0.7259556788702394 0.8971102599525771 0.8870864242651173 0.7798755458576239 0.6420316461542878 0.08413996499504883 0.16162871409461377 0.8985541885270792;
 0.6064290596595899 0.009197051616629648 0.1014715428660321 0.6635017691080558 0.005061583846218687 0.16080805141749865 0.5487337893665861 0.6918951976926933 0.6519612595026005 0.22426930946055978 0.7121792213475359 0.23724908749680007
	)");

  Matrix<type> C = Matrix<type>(R"(
	0.3253996981592677 0.7464914051180241;
 0.6496328990472147 0.8492234104941779;
 0.6576128923003434 0.5683086033354716;
 0.09367476782809248 0.3677158030594335;
 0.26520236768172545 0.24398964337908358;
 0.9730105547524456 0.3930977246667604;
 0.8920465551771133 0.6311386259972629;
 0.7948113035416484 0.5026370931051921;
 0.5769038846263591 0.4925176938188639
	)");

  Matrix<type> R = Matrix<type>(R"(
	1.5428486967314916 1.19585423411537;
 1.4759915100585526 1.0383836092811038;
 1.7885689119361297 1.179796084707461;
 1.4503459423139922 0.935205712761029;
 1.5439092414489746 1.0185175078073097;
 1.1896428242952022 0.9627055455055211;
 1.6054722646958441 1.0306057372328898;
 1.2328003824705542 0.843351531858053;
 1.7322778464793327 1.088358018227959
	)");

  gemm_nt_vector(alpha, A, B, beta, C);

  ASSERT_TRUE(R.AllClose(C));
}

TEST(blas_gemm_vectorised, blas_gemm_nt_vector6)
{

  Blas<double,
       Matrix<
           double, fetch::memory::SharedArray<double>,
           fetch::math::RectangularArray<double, fetch::memory::SharedArray<double>, true, false>>,
       Signature(_C <= _alpha, _A, _B, _beta, _C), Computes(_C = _alpha * _A * T(_B) + _beta * _C),
       platform::Parallelisation::VECTORISE>
      gemm_nt_vector;
  // Compuing _C = _alpha * _A * T(_B) + _beta * _C
  using type = double;

  type alpha = type(0.32967024618967666);
  type beta  = type(0.018106978437453014);

  Matrix<type> A = Matrix<type>(R"(
	0.1952429877980445 0.7224521152615053 0.2807723624408558 0.02431596643145384 0.6454722959071678 0.17711067940704894 0.9404585843529143 0.9539285770025874;
 0.9148643902204485 0.3701587002554444 0.015456616528867428 0.9283185625877254 0.42818414831731433 0.9666548190436696 0.9636199770892528 0.8530094554673601;
 0.2944488920695857 0.38509772860192526 0.8511366715168569 0.31692200515627766 0.1694927466860925 0.5568012624583502 0.936154774160781 0.696029796674973;
 0.570061170089365 0.09717649377076854 0.6150072266991697 0.9900538501042633 0.14008401523652403 0.5183296523637367 0.8773730719279554 0.7407686177542044;
 0.697015740995268 0.7024840839871093 0.35949115121975517 0.29359184426449336 0.8093611554785136 0.8101133946791808 0.8670723185801037 0.9132405525564713;
 0.5113423988609378 0.5015162946871996 0.7982951789667752 0.6499639307777652 0.7019668772577033 0.795792669436101 0.8900053418175663 0.3379951568515358;
 0.375582952639944 0.093981939840869 0.578280140996174 0.035942273796742086 0.46559801813246016 0.5426446347075766 0.2865412521282844 0.5908332605690108
	)");

  Matrix<type> B = Matrix<type>(R"(
	0.03050024993904943 0.03734818874921442 0.8226005606596583 0.3601906414112629 0.12706051265188478 0.5222432600548044 0.7699935530986108 0.21582102749684318;
 0.6228904758190003 0.085347464993768 0.0516817211686077 0.531354631568148 0.5406351216101065 0.6374299014982066 0.7260913337226615 0.9758520794625346;
 0.5163003483011953 0.32295647294124596 0.7951861947687037 0.2708322512620742 0.4389714207056361 0.07845638134226596 0.02535074341545751 0.9626484146779251;
 0.8359801205122058 0.695974206093698 0.4089529444142699 0.17329432007084578 0.15643704267108605 0.25024289816459533 0.5492266647061205 0.7145959227000623;
 0.6601973767177313 0.27993389694594284 0.9548652806631941 0.7378969166957685 0.5543540525114007 0.6117207462343522 0.4196000624277899 0.24773098950115746;
 0.3559726786512616 0.7578461104643691 0.014393488629755868 0.11607264050691624 0.04600264202175275 0.040728802318970136 0.8554605840110072 0.7036578593800237;
 0.4741738290873252 0.09783416065100148 0.49161587511683236 0.4734717707805657 0.17320186991001518 0.43385164923797304 0.39850473439737344 0.6158500980522165
	)");

  Matrix<type> C = Matrix<type>(R"(
	0.6350936508676438 0.04530400977204452 0.3746126146264712 0.6258599157142364 0.5031362585800877 0.8564898411883223 0.658693631618945;
 0.1629344270814297 0.07056874740042984 0.6424192782063156 0.026511310541621813 0.5857755812734633 0.9402302414249576 0.575474177875879;
 0.3881699262065219 0.6432882184423532 0.45825289049151663 0.5456167893159349 0.9414648087765252 0.38610263780077425 0.9611905638239142;
 0.9053506419560637 0.19579113478929644 0.06936130087516545 0.10077800137742665 0.018221825651549728 0.0944429607559284 0.6830067734163568;
 0.07118864846022899 0.3189756302937613 0.8448753109694546 0.023271935735825866 0.8144684825889358 0.28185477477339993 0.11816482762165625;
 0.6967371653641506 0.628942846779884 0.877472013527053 0.7350710438038858 0.8034809303848486 0.2820345725713065 0.17743954377972282;
 0.7506147516408583 0.806834739267264 0.9905051420006733 0.4126176769114265 0.37201808579278317 0.7764129607419968 0.34080354025301784
	)");

  Matrix<type> R = Matrix<type>(R"(
	0.46551915476867856 0.754551436872953 0.601295580922909 0.7130548918069133 0.5742563362527602 0.7198634078875497 0.49446386023525524;
 0.62079430405404 1.1469711850857611 0.6594267140282969 0.8699219988938753 0.9507317944209486 0.7415736434379122 0.7752651018692693;
 0.6733033144851744 0.7481887668878716 0.6184809321291286 0.7003932072099944 0.7913032213931244 0.5894468351631375 0.6168830047141929;
 0.6781956878964721 0.8894682064124487 0.6343517866715436 0.7040624403991199 0.8798073777976441 0.5620513242627588 0.7066216958164739;
 0.6077546928340534 1.0420681147287076 0.7643330940952432 0.8996468507493425 0.921677201107206 0.7548819707665961 0.699252456723144;
 0.7339838364084269 0.8720783118779416 0.6604958636228491 0.7566881073106052 1.0210214203340098 0.5698091224471622 0.669604504123701;
 0.4073184694355695 0.5662104020066824 0.5179878814060995 0.47241171017151384 0.5703477931037897 0.3179504113278586 0.4290449091314171
	)");

  gemm_nt_vector(alpha, A, B, beta, C);

  ASSERT_TRUE(R.AllClose(C));
}

TEST(blas_gemm_vectorised, blas_gemm_nt_vector7)
{

  Blas<double,
       Matrix<
           double, fetch::memory::SharedArray<double>,
           fetch::math::RectangularArray<double, fetch::memory::SharedArray<double>, true, false>>,
       Signature(_C <= _alpha, _A, _B, _beta, _C), Computes(_C = _alpha * _A * T(_B) + _beta * _C),
       platform::Parallelisation::VECTORISE>
      gemm_nt_vector;
  // Compuing _C = _alpha * _A * T(_B) + _beta * _C
  using type = double;

  type alpha = type(0.1335118154899717);
  type beta  = type(0.009839512582652477);

  Matrix<type> A = Matrix<type>(R"(
	0.9307573256035647 0.8584127518430118
	)");

  Matrix<type> B = Matrix<type>(R"(
	0.42899402737501835 0.7508710677914974
	)");

  Matrix<type> C = Matrix<type>(R"(
	0.7545428740846823
	)");

  Matrix<type> R = Matrix<type>(R"(
	0.14679019319555714
	)");

  gemm_nt_vector(alpha, A, B, beta, C);

  ASSERT_TRUE(R.AllClose(C));
}
