function main()

if (System.Argc() != 3)
  print("Usage: SCRIPT_FILE -- PATH/TO/train-images-idx3-ubyte PATH/TO/train-labels-idx1-ubyte");
  return;
endif

var training_iterations = 10;

// Define the neural network
var g = Graph();
g.addPlaceholder("Input");
g.addPlaceholder("Label");
g.addFullyConnected("FC_1", "Input", 28*28, 128);
g.addRelu("Relu_1", "FC_1");
g.addFullyConnected("FC_2", "Relu_1", 128, 64);
g.addRelu("Relu_2", "FC_2");
g.addFullyConnected("FC_3", "Relu_2", 64, 10);
g.addSoftmax("Softmax", "FC_3");
g.addCrossEntropyLoss("Error", "Softmax", "Label");

// Set up the dataloader
printLn(System.Argv(1));
printLn(System.Argv(2));
var data_loader = DataLoader("tensor");
var images = loadMNISTImages(System.Argv(1));
var labels = loadMNISTLabels(System.Argv(2));
data_loader.addData({images}, labels);

// Set up the optimiser
var optimiser = Optimiser("adam", g, data_loader, {"Input"}, "Label", "Error");

// Begin the training loop
var batch_size = 64u64;
var subset_size = (100u64 * 64u64);
for(i in 0:training_iterations)
    var loss = optimiser.run(batch_size, subset_size);
    print("Current Loss: ");
    printLn(loss);
endfor

endfunction
