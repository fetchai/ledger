function build_graph(graph: Graph)
// make graph with correct architecture
var dropout_prob = 0.0fp64;
var input_size = 118;
var first_dense_size = 216;
var second_dense_size = 108;
var output_size = 54;

graph.addPlaceholder("num_input");
graph.addPlaceholder("label");
graph.addDropout("dropout_0", "num_input", dropout_prob);
graph.addFullyConnected("hidden_dense_1", "dropout_0", input_size, first_dense_size);
graph.addSoftmax("softmax_1", "hidden_dense_1");
graph.addDropout("dropout_1", "softmax_1", dropout_prob);
graph.addFullyConnected("hidden_dense_2", "dropout_1", first_dense_size, second_dense_size);
graph.addSoftmax("softmax_2", "hidden_dense_2");
graph.addDropout("dropout_2", "softmax_2", dropout_prob);
graph.addFullyConnected("output_dense", "dropout_2", second_dense_size, output_size);
graph.addSoftmax("softmax_3", "output_dense");

graph.addMeanSquareErrorLoss("Error", "softmax_3", "label");

endfunction


function main()

if (System.Argc() != 4)
  printLn("Usage: VM SCRIPT_FILE PATH/TO/model_files/ /PATH/TO/input_file.csv /PATH/TO/label_file.csv");
  return;
endif

// LOAD THE DATA
var train_data = readCSV(System.Argv(2));
var train_labels = readCSV(System.Argv(3));

var loader = DataLoader("tensor");
loader.addData({train_data}, train_labels);

var testing = true;

if (testing)
    var state = State<Graph>("foo");
    var graph = state.get();
    printLn("Loaded graph from state");
    var pred_string = "";
    while(!loader.isDone())
        var input_data = loader.getNext();
        graph.setInput("num_input", input_data.data()[0]);
        var pred = graph.evaluate("softmax_3");
        pred_string = pred.toString();
    endwhile
    print(pred_string);
    printLn("Finished successfully");
else
    var graph = Graph();
    build_graph(graph);
    // Set up the optimiser
    var optimiser = Optimiser("adam", graph, loader, {"num_input"}, "softmax_3", "error");

    // Begin the training loop
    var training_iterations = 10;
    var batch_size = 64u64;
    var subset_size = (100u64 * 64u64);
    for(i in 0:training_iterations)
        var loss = optimiser.run(batch_size, subset_size);
        print("Current Loss: ");
        printLn(loss);
    endfor
endif


endfunction
