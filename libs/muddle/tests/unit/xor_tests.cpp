//------------------------------------------------------------------------------
//
//   Copyright 2018-2019 Fetch.AI Limited
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//------------------------------------------------------------------------------

#include "xor_metric.hpp"

#include "core/byte_array/decoders.hpp"
#include "core/macros.hpp"

#include "gtest/gtest.h"

namespace {

using fetch::byte_array::FromHex;

struct Config
{
  char const *from;
  char const *to;
  uint64_t    distance;
};

constexpr uint64_t INVALID = std::numeric_limits<uint64_t>::max();

// clang-format off
Config const CONFIGS[] = {
      { "0000000000000000", "8000000000000000", 64}
    , { "0000000000000000", "4000000000000000", 63}
    , { "0000000000000000", "2000000000000000", 62}
    , { "0000000000000000", "1000000000000000", 61}
    , { "0000000000000000", "0800000000000000", 60}
    , { "0000000000000000", "0400000000000000", 59}
    , { "0000000000000000", "0200000000000000", 58}
    , { "0000000000000000", "0100000000000000", 57}
    , { "0000000000000000", "0080000000000000", 56}
    , { "0000000000000000", "0040000000000000", 55}
    , { "0000000000000000", "0020000000000000", 54}
    , { "0000000000000000", "0010000000000000", 53}
    , { "0000000000000000", "0008000000000000", 52}
    , { "0000000000000000", "0004000000000000", 51}
    , { "0000000000000000", "0002000000000000", 50}
    , { "0000000000000000", "0001000000000000", 49}
    , { "0000000000000000", "0000800000000000", 48}
    , { "0000000000000000", "0000400000000000", 47}
    , { "0000000000000000", "0000200000000000", 46}
    , { "0000000000000000", "0000100000000000", 45}
    , { "0000000000000000", "0000080000000000", 44}
    , { "0000000000000000", "0000040000000000", 43}
    , { "0000000000000000", "0000020000000000", 42}
    , { "0000000000000000", "0000010000000000", 41}
    , { "0000000000000000", "0000008000000000", 40}
    , { "0000000000000000", "0000004000000000", 39}
    , { "0000000000000000", "0000002000000000", 38}
    , { "0000000000000000", "0000001000000000", 37}
    , { "0000000000000000", "0000000800000000", 36}
    , { "0000000000000000", "0000000400000000", 35}
    , { "0000000000000000", "0000000200000000", 34}
    , { "0000000000000000", "0000000100000000", 33}
    , { "0000000000000000", "0000000080000000", 32}
    , { "0000000000000000", "0000000040000000", 31}
    , { "0000000000000000", "0000000020000000", 30}
    , { "0000000000000000", "0000000010000000", 29}
    , { "0000000000000000", "0000000008000000", 28}
    , { "0000000000000000", "0000000004000000", 27}
    , { "0000000000000000", "0000000002000000", 26}
    , { "0000000000000000", "0000000001000000", 25}
    , { "0000000000000000", "0000000000800000", 24}
    , { "0000000000000000", "0000000000400000", 23}
    , { "0000000000000000", "0000000000200000", 22}
    , { "0000000000000000", "0000000000100000", 21}
    , { "0000000000000000", "0000000000080000", 20}
    , { "0000000000000000", "0000000000040000", 19}
    , { "0000000000000000", "0000000000020000", 18}
    , { "0000000000000000", "0000000000010000", 17}
    , { "0000000000000000", "0000000000008000", 16}
    , { "0000000000000000", "0000000000004000", 15}
    , { "0000000000000000", "0000000000002000", 14}
    , { "0000000000000000", "0000000000001000", 13}
    , { "0000000000000000", "0000000000000800", 12}
    , { "0000000000000000", "0000000000000400", 11}
    , { "0000000000000000", "0000000000000200", 10}
    , { "0000000000000000", "0000000000000100", 9}
    , { "0000000000000000", "0000000000000080", 8}
    , { "0000000000000000", "0000000000000040", 7}
    , { "0000000000000000", "0000000000000020", 6}
    , { "0000000000000000", "0000000000000010", 5}
    , { "0000000000000000", "0000000000000008", 4}
    , { "0000000000000000", "0000000000000004", 3}
    , { "0000000000000000", "0000000000000002", 2}
    , { "0000000000000000", "0000000000000001", 1}
    , { "0000000000000000", "0000000000000000", 0}
// non-aligned cases
    , { "000000000000000000", "800000000000000000", 72}
    , { "000000000000000000", "400000000000000000", 71}
    , { "000000000000000000", "200000000000000000", 70}
    , { "000000000000000000", "100000000000000000", 69}
    , { "000000000000000000", "080000000000000000", 68}
    , { "000000000000000000", "040000000000000000", 67}
    , { "000000000000000000", "020000000000000000", 66}
    , { "000000000000000000", "010000000000000000", 65}
    , { "000000000000000000", "008000000000000000", 64}
    , { "000000000000000000", "004000000000000000", 63}
    , { "000000000000000000", "002000000000000000", 62}
    , { "000000000000000000", "001000000000000000", 61}
    , { "000000000000000000", "000800000000000000", 60}
    , { "000000000000000000", "000400000000000000", 59}
    , { "000000000000000000", "000200000000000000", 58}
    , { "000000000000000000", "000100000000000000", 57}
    , { "000000000000000000", "000080000000000000", 56}
    , { "000000000000000000", "000040000000000000", 55}
    , { "000000000000000000", "000020000000000000", 54}
    , { "000000000000000000", "000010000000000000", 53}
    , { "000000000000000000", "000008000000000000", 52}
    , { "000000000000000000", "000004000000000000", 51}
    , { "000000000000000000", "000002000000000000", 50}
    , { "000000000000000000", "000001000000000000", 49}
    , { "000000000000000000", "000000800000000000", 48}
    , { "000000000000000000", "000000400000000000", 47}
    , { "000000000000000000", "000000200000000000", 46}
    , { "000000000000000000", "000000100000000000", 45}
    , { "000000000000000000", "000000080000000000", 44}
    , { "000000000000000000", "000000040000000000", 43}
    , { "000000000000000000", "000000020000000000", 42}
    , { "000000000000000000", "000000010000000000", 41}
    , { "000000000000000000", "000000008000000000", 40}
    , { "000000000000000000", "000000004000000000", 39}
    , { "000000000000000000", "000000002000000000", 38}
    , { "000000000000000000", "000000001000000000", 37}
    , { "000000000000000000", "000000000800000000", 36}
    , { "000000000000000000", "000000000400000000", 35}
    , { "000000000000000000", "000000000200000000", 34}
    , { "000000000000000000", "000000000100000000", 33}
    , { "000000000000000000", "000000000080000000", 32}
    , { "000000000000000000", "000000000040000000", 31}
    , { "000000000000000000", "000000000020000000", 30}
    , { "000000000000000000", "000000000010000000", 29}
    , { "000000000000000000", "000000000008000000", 28}
    , { "000000000000000000", "000000000004000000", 27}
    , { "000000000000000000", "000000000002000000", 26}
    , { "000000000000000000", "000000000001000000", 25}
    , { "000000000000000000", "000000000000800000", 24}
    , { "000000000000000000", "000000000000400000", 23}
    , { "000000000000000000", "000000000000200000", 22}
    , { "000000000000000000", "000000000000100000", 21}
    , { "000000000000000000", "000000000000080000", 20}
    , { "000000000000000000", "000000000000040000", 19}
    , { "000000000000000000", "000000000000020000", 18}
    , { "000000000000000000", "000000000000010000", 17}
    , { "000000000000000000", "000000000000008000", 16}
    , { "000000000000000000", "000000000000004000", 15}
    , { "000000000000000000", "000000000000002000", 14}
    , { "000000000000000000", "000000000000001000", 13}
    , { "000000000000000000", "000000000000000800", 12}
    , { "000000000000000000", "000000000000000400", 11}
    , { "000000000000000000", "000000000000000200", 10}
    , { "000000000000000000", "000000000000000100", 9}
    , { "000000000000000000", "000000000000000080", 8}
    , { "000000000000000000", "000000000000000040", 7}
    , { "000000000000000000", "000000000000000020", 6}
    , { "000000000000000000", "000000000000000010", 5}
    , { "000000000000000000", "000000000000000008", 4}
    , { "000000000000000000", "000000000000000004", 3}
    , { "000000000000000000", "000000000000000002", 2}
    , { "000000000000000000", "000000000000000001", 1}
    , { "000000000000000000", "000000000000000000", 0}
// error cases
    , { "", "", INVALID}
    , { "aa", "aaab", INVALID}
};
// clang-format on

std::ostream &FETCH_MAYBE_UNUSED operator<<(std::ostream &stream, Config const &cfg)
{
  stream << cfg.from << ":" << cfg.to << ":" << cfg.distance;
  return stream;
}

class XorMetricTests : public ::testing::TestWithParam<Config>
{
protected:
};

TEST_P(XorMetricTests, CheckDistance)
{
  auto const &cfg = GetParam();

  auto const from_address = FromHex(cfg.from);
  auto const to_address   = FromHex(cfg.to);

  EXPECT_EQ(cfg.distance, fetch::muddle::CalculateDistance(from_address, to_address));
}

INSTANTIATE_TEST_CASE_P(ParamBased, XorMetricTests, testing::ValuesIn(CONFIGS), );

}  // namespace
