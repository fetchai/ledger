//------------------------------------------------------------------------------
//
//   Copyright 2018 Fetch.AI Limited
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//------------------------------------------------------------------------------

#include "core/meta/is_log2.hpp"
#include "ledger/chain/mutable_transaction.hpp"
#include "ledger/chain/transaction.hpp"
#include "miner/basic_miner.hpp"
#include "miner/resource_mapper.hpp"

#include <chrono>
#include <random>
#include <memory>
#include <fstream>
#include <gtest/gtest.h>

using fetch::meta::IsLog2;
using fetch::meta::Log2;
using fetch::byte_array::ToBase64;

struct TestParam
{
  uint32_t num_tx;
  uint32_t num_threads;
};

inline std::ostream &operator<<(std::ostream& s, TestParam const &config)
{
  s << "{ \"num_tx\": " << config.num_tx << ", \"num_threads\": " << config.num_threads << " }";
  return s;
}

static const TestParam CONFIGS[] = {
    {  10000,  1 }
  , {  10000,  2 }
  , {  10000,  3 }
  , {  10000,  4 }
  , {  10000,  5 }
  , {  10000,  6 }
  , {  10000,  7 }
  , {  10000,  8 }
  , {  10000,  9 }
  , {  10000, 10 }
  , {  10000, 11 }
  , {  10000, 12 }
  , {  10000, 13 }
  , {  10000, 14 }
  , {  10000, 15 }
  , {  10000, 16 }
  , {  10000, 17 }
  , {  10000, 18 }
  , {  10000, 19 }
  , {  10000, 20 }
  , {  10000, 21 }
  , {  10000, 22 }
  , {  10000, 23 }
  , {  10000, 24 }
  , {  10000, 25 }
  , {  10000, 26 }
  , {  10000, 27 }
  , {  10000, 28 }
  , {  10000, 29 }
  , {  10000, 30 }
  , {  10000, 31 }
  , {  10000, 32 }
  , {  20000,  1 }
  , {  20000,  2 }
  , {  20000,  3 }
  , {  20000,  4 }
  , {  20000,  5 }
  , {  20000,  6 }
  , {  20000,  7 }
  , {  20000,  8 }
  , {  20000,  9 }
  , {  20000, 10 }
  , {  20000, 11 }
  , {  20000, 12 }
  , {  20000, 13 }
  , {  20000, 14 }
  , {  20000, 15 }
  , {  20000, 16 }
  , {  20000, 17 }
  , {  20000, 18 }
  , {  20000, 19 }
  , {  20000, 20 }
  , {  20000, 21 }
  , {  20000, 22 }
  , {  20000, 23 }
  , {  20000, 24 }
  , {  20000, 25 }
  , {  20000, 26 }
  , {  20000, 27 }
  , {  20000, 28 }
  , {  20000, 29 }
  , {  20000, 30 }
  , {  20000, 31 }
  , {  20000, 32 }
  , {  30000,  1 }
  , {  30000,  2 }
  , {  30000,  3 }
  , {  30000,  4 }
  , {  30000,  5 }
  , {  30000,  6 }
  , {  30000,  7 }
  , {  30000,  8 }
  , {  30000,  9 }
  , {  30000, 10 }
  , {  30000, 11 }
  , {  30000, 12 }
  , {  30000, 13 }
  , {  30000, 14 }
  , {  30000, 15 }
  , {  30000, 16 }
  , {  30000, 17 }
  , {  30000, 18 }
  , {  30000, 19 }
  , {  30000, 20 }
  , {  30000, 21 }
  , {  30000, 22 }
  , {  30000, 23 }
  , {  30000, 24 }
  , {  30000, 25 }
  , {  30000, 26 }
  , {  30000, 27 }
  , {  30000, 28 }
  , {  30000, 29 }
  , {  30000, 30 }
  , {  30000, 31 }
  , {  30000, 32 }
  , {  40000,  1 }
  , {  40000,  2 }
  , {  40000,  3 }
  , {  40000,  4 }
  , {  40000,  5 }
  , {  40000,  6 }
  , {  40000,  7 }
  , {  40000,  8 }
  , {  40000,  9 }
  , {  40000, 10 }
  , {  40000, 11 }
  , {  40000, 12 }
  , {  40000, 13 }
  , {  40000, 14 }
  , {  40000, 15 }
  , {  40000, 16 }
  , {  40000, 17 }
  , {  40000, 18 }
  , {  40000, 19 }
  , {  40000, 20 }
  , {  40000, 21 }
  , {  40000, 22 }
  , {  40000, 23 }
  , {  40000, 24 }
  , {  40000, 25 }
  , {  40000, 26 }
  , {  40000, 27 }
  , {  40000, 28 }
  , {  40000, 29 }
  , {  40000, 30 }
  , {  40000, 31 }
  , {  40000, 32 }
  , {  50000,  1 }
  , {  50000,  2 }
  , {  50000,  3 }
  , {  50000,  4 }
  , {  50000,  5 }
  , {  50000,  6 }
  , {  50000,  7 }
  , {  50000,  8 }
  , {  50000,  9 }
  , {  50000, 10 }
  , {  50000, 11 }
  , {  50000, 12 }
  , {  50000, 13 }
  , {  50000, 14 }
  , {  50000, 15 }
  , {  50000, 16 }
  , {  50000, 17 }
  , {  50000, 18 }
  , {  50000, 19 }
  , {  50000, 20 }
  , {  50000, 21 }
  , {  50000, 22 }
  , {  50000, 23 }
  , {  50000, 24 }
  , {  50000, 25 }
  , {  50000, 26 }
  , {  50000, 27 }
  , {  50000, 28 }
  , {  50000, 29 }
  , {  50000, 30 }
  , {  50000, 31 }
  , {  50000, 32 }
  , {  60000,  1 }
  , {  60000,  2 }
  , {  60000,  3 }
  , {  60000,  4 }
  , {  60000,  5 }
  , {  60000,  6 }
  , {  60000,  7 }
  , {  60000,  8 }
  , {  60000,  9 }
  , {  60000, 10 }
  , {  60000, 11 }
  , {  60000, 12 }
  , {  60000, 13 }
  , {  60000, 14 }
  , {  60000, 15 }
  , {  60000, 16 }
  , {  60000, 17 }
  , {  60000, 18 }
  , {  60000, 19 }
  , {  60000, 20 }
  , {  60000, 21 }
  , {  60000, 22 }
  , {  60000, 23 }
  , {  60000, 24 }
  , {  60000, 25 }
  , {  60000, 26 }
  , {  60000, 27 }
  , {  60000, 28 }
  , {  60000, 29 }
  , {  60000, 30 }
  , {  60000, 31 }
  , {  60000, 32 }
  , {  70000,  1 }
  , {  70000,  2 }
  , {  70000,  3 }
  , {  70000,  4 }
  , {  70000,  5 }
  , {  70000,  6 }
  , {  70000,  7 }
  , {  70000,  8 }
  , {  70000,  9 }
  , {  70000, 10 }
  , {  70000, 11 }
  , {  70000, 12 }
  , {  70000, 13 }
  , {  70000, 14 }
  , {  70000, 15 }
  , {  70000, 16 }
  , {  70000, 17 }
  , {  70000, 18 }
  , {  70000, 19 }
  , {  70000, 20 }
  , {  70000, 21 }
  , {  70000, 22 }
  , {  70000, 23 }
  , {  70000, 24 }
  , {  70000, 25 }
  , {  70000, 26 }
  , {  70000, 27 }
  , {  70000, 28 }
  , {  70000, 29 }
  , {  70000, 30 }
  , {  70000, 31 }
  , {  70000, 32 }
  , {  80000,  1 }
  , {  80000,  2 }
  , {  80000,  3 }
  , {  80000,  4 }
  , {  80000,  5 }
  , {  80000,  6 }
  , {  80000,  7 }
  , {  80000,  8 }
  , {  80000,  9 }
  , {  80000, 10 }
  , {  80000, 11 }
  , {  80000, 12 }
  , {  80000, 13 }
  , {  80000, 14 }
  , {  80000, 15 }
  , {  80000, 16 }
  , {  80000, 17 }
  , {  80000, 18 }
  , {  80000, 19 }
  , {  80000, 20 }
  , {  80000, 21 }
  , {  80000, 22 }
  , {  80000, 23 }
  , {  80000, 24 }
  , {  80000, 25 }
  , {  80000, 26 }
  , {  80000, 27 }
  , {  80000, 28 }
  , {  80000, 29 }
  , {  80000, 30 }
  , {  80000, 31 }
  , {  80000, 32 }
  , {  90000,  1 }
  , {  90000,  2 }
  , {  90000,  3 }
  , {  90000,  4 }
  , {  90000,  5 }
  , {  90000,  6 }
  , {  90000,  7 }
  , {  90000,  8 }
  , {  90000,  9 }
  , {  90000, 10 }
  , {  90000, 11 }
  , {  90000, 12 }
  , {  90000, 13 }
  , {  90000, 14 }
  , {  90000, 15 }
  , {  90000, 16 }
  , {  90000, 17 }
  , {  90000, 18 }
  , {  90000, 19 }
  , {  90000, 20 }
  , {  90000, 21 }
  , {  90000, 22 }
  , {  90000, 23 }
  , {  90000, 24 }
  , {  90000, 25 }
  , {  90000, 26 }
  , {  90000, 27 }
  , {  90000, 28 }
  , {  90000, 29 }
  , {  90000, 30 }
  , {  90000, 31 }
  , {  90000, 32 }
  , { 100000,  1 }
  , { 100000,  2 }
  , { 100000,  3 }
  , { 100000,  4 }
  , { 100000,  5 }
  , { 100000,  6 }
  , { 100000,  7 }
  , { 100000,  8 }
  , { 100000,  9 }
  , { 100000, 10 }
  , { 100000, 11 }
  , { 100000, 12 }
  , { 100000, 13 }
  , { 100000, 14 }
  , { 100000, 15 }
  , { 100000, 16 }
  , { 100000, 17 }
  , { 100000, 18 }
  , { 100000, 19 }
  , { 100000, 20 }
  , { 100000, 21 }
  , { 100000, 22 }
  , { 100000, 23 }
  , { 100000, 24 }
  , { 100000, 25 }
  , { 100000, 26 }
  , { 100000, 27 }
  , { 100000, 28 }
  , { 100000, 29 }
  , { 100000, 30 }
  , { 100000, 31 }
  , { 100000, 32 }
  , { 110000,  1 }
  , { 110000,  2 }
  , { 110000,  3 }
  , { 110000,  4 }
  , { 110000,  5 }
  , { 110000,  6 }
  , { 110000,  7 }
  , { 110000,  8 }
  , { 110000,  9 }
  , { 110000, 10 }
  , { 110000, 11 }
  , { 110000, 12 }
  , { 110000, 13 }
  , { 110000, 14 }
  , { 110000, 15 }
  , { 110000, 16 }
  , { 110000, 17 }
  , { 110000, 18 }
  , { 110000, 19 }
  , { 110000, 20 }
  , { 110000, 21 }
  , { 110000, 22 }
  , { 110000, 23 }
  , { 110000, 24 }
  , { 110000, 25 }
  , { 110000, 26 }
  , { 110000, 27 }
  , { 110000, 28 }
  , { 110000, 29 }
  , { 110000, 30 }
  , { 110000, 31 }
  , { 110000, 32 }
  , { 120000,  1 }
  , { 120000,  2 }
  , { 120000,  3 }
  , { 120000,  4 }
  , { 120000,  5 }
  , { 120000,  6 }
  , { 120000,  7 }
  , { 120000,  8 }
  , { 120000,  9 }
  , { 120000, 10 }
  , { 120000, 11 }
  , { 120000, 12 }
  , { 120000, 13 }
  , { 120000, 14 }
  , { 120000, 15 }
  , { 120000, 16 }
  , { 120000, 17 }
  , { 120000, 18 }
  , { 120000, 19 }
  , { 120000, 20 }
  , { 120000, 21 }
  , { 120000, 22 }
  , { 120000, 23 }
  , { 120000, 24 }
  , { 120000, 25 }
  , { 120000, 26 }
  , { 120000, 27 }
  , { 120000, 28 }
  , { 120000, 29 }
  , { 120000, 30 }
  , { 120000, 31 }
  , { 120000, 32 }
  , { 130000,  1 }
  , { 130000,  2 }
  , { 130000,  3 }
  , { 130000,  4 }
  , { 130000,  5 }
  , { 130000,  6 }
  , { 130000,  7 }
  , { 130000,  8 }
  , { 130000,  9 }
  , { 130000, 10 }
  , { 130000, 11 }
  , { 130000, 12 }
  , { 130000, 13 }
  , { 130000, 14 }
  , { 130000, 15 }
  , { 130000, 16 }
  , { 130000, 17 }
  , { 130000, 18 }
  , { 130000, 19 }
  , { 130000, 20 }
  , { 130000, 21 }
  , { 130000, 22 }
  , { 130000, 23 }
  , { 130000, 24 }
  , { 130000, 25 }
  , { 130000, 26 }
  , { 130000, 27 }
  , { 130000, 28 }
  , { 130000, 29 }
  , { 130000, 30 }
  , { 130000, 31 }
  , { 130000, 32 }
  , { 140000,  1 }
  , { 140000,  2 }
  , { 140000,  3 }
  , { 140000,  4 }
  , { 140000,  5 }
  , { 140000,  6 }
  , { 140000,  7 }
  , { 140000,  8 }
  , { 140000,  9 }
  , { 140000, 10 }
  , { 140000, 11 }
  , { 140000, 12 }
  , { 140000, 13 }
  , { 140000, 14 }
  , { 140000, 15 }
  , { 140000, 16 }
  , { 140000, 17 }
  , { 140000, 18 }
  , { 140000, 19 }
  , { 140000, 20 }
  , { 140000, 21 }
  , { 140000, 22 }
  , { 140000, 23 }
  , { 140000, 24 }
  , { 140000, 25 }
  , { 140000, 26 }
  , { 140000, 27 }
  , { 140000, 28 }
  , { 140000, 29 }
  , { 140000, 30 }
  , { 140000, 31 }
  , { 140000, 32 }
  , { 150000,  1 }
  , { 150000,  2 }
  , { 150000,  3 }
  , { 150000,  4 }
  , { 150000,  5 }
  , { 150000,  6 }
  , { 150000,  7 }
  , { 150000,  8 }
  , { 150000,  9 }
  , { 150000, 10 }
  , { 150000, 11 }
  , { 150000, 12 }
  , { 150000, 13 }
  , { 150000, 14 }
  , { 150000, 15 }
  , { 150000, 16 }
  , { 150000, 17 }
  , { 150000, 18 }
  , { 150000, 19 }
  , { 150000, 20 }
  , { 150000, 21 }
  , { 150000, 22 }
  , { 150000, 23 }
  , { 150000, 24 }
  , { 150000, 25 }
  , { 150000, 26 }
  , { 150000, 27 }
  , { 150000, 28 }
  , { 150000, 29 }
  , { 150000, 30 }
  , { 150000, 31 }
  , { 150000, 32 }
  , { 160000,  1 }
  , { 160000,  2 }
  , { 160000,  3 }
  , { 160000,  4 }
  , { 160000,  5 }
  , { 160000,  6 }
  , { 160000,  7 }
  , { 160000,  8 }
  , { 160000,  9 }
  , { 160000, 10 }
  , { 160000, 11 }
  , { 160000, 12 }
  , { 160000, 13 }
  , { 160000, 14 }
  , { 160000, 15 }
  , { 160000, 16 }
  , { 160000, 17 }
  , { 160000, 18 }
  , { 160000, 19 }
  , { 160000, 20 }
  , { 160000, 21 }
  , { 160000, 22 }
  , { 160000, 23 }
  , { 160000, 24 }
  , { 160000, 25 }
  , { 160000, 26 }
  , { 160000, 27 }
  , { 160000, 28 }
  , { 160000, 29 }
  , { 160000, 30 }
  , { 160000, 31 }
  , { 160000, 32 }
  , { 170000,  1 }
  , { 170000,  2 }
  , { 170000,  3 }
  , { 170000,  4 }
  , { 170000,  5 }
  , { 170000,  6 }
  , { 170000,  7 }
  , { 170000,  8 }
  , { 170000,  9 }
  , { 170000, 10 }
  , { 170000, 11 }
  , { 170000, 12 }
  , { 170000, 13 }
  , { 170000, 14 }
  , { 170000, 15 }
  , { 170000, 16 }
  , { 170000, 17 }
  , { 170000, 18 }
  , { 170000, 19 }
  , { 170000, 20 }
  , { 170000, 21 }
  , { 170000, 22 }
  , { 170000, 23 }
  , { 170000, 24 }
  , { 170000, 25 }
  , { 170000, 26 }
  , { 170000, 27 }
  , { 170000, 28 }
  , { 170000, 29 }
  , { 170000, 30 }
  , { 170000, 31 }
  , { 170000, 32 }
  , { 180000,  1 }
  , { 180000,  2 }
  , { 180000,  3 }
  , { 180000,  4 }
  , { 180000,  5 }
  , { 180000,  6 }
  , { 180000,  7 }
  , { 180000,  8 }
  , { 180000,  9 }
  , { 180000, 10 }
  , { 180000, 11 }
  , { 180000, 12 }
  , { 180000, 13 }
  , { 180000, 14 }
  , { 180000, 15 }
  , { 180000, 16 }
  , { 180000, 17 }
  , { 180000, 18 }
  , { 180000, 19 }
  , { 180000, 20 }
  , { 180000, 21 }
  , { 180000, 22 }
  , { 180000, 23 }
  , { 180000, 24 }
  , { 180000, 25 }
  , { 180000, 26 }
  , { 180000, 27 }
  , { 180000, 28 }
  , { 180000, 29 }
  , { 180000, 30 }
  , { 180000, 31 }
  , { 180000, 32 }
  , { 190000,  1 }
  , { 190000,  2 }
  , { 190000,  3 }
  , { 190000,  4 }
  , { 190000,  5 }
  , { 190000,  6 }
  , { 190000,  7 }
  , { 190000,  8 }
  , { 190000,  9 }
  , { 190000, 10 }
  , { 190000, 11 }
  , { 190000, 12 }
  , { 190000, 13 }
  , { 190000, 14 }
  , { 190000, 15 }
  , { 190000, 16 }
  , { 190000, 17 }
  , { 190000, 18 }
  , { 190000, 19 }
  , { 190000, 20 }
  , { 190000, 21 }
  , { 190000, 22 }
  , { 190000, 23 }
  , { 190000, 24 }
  , { 190000, 25 }
  , { 190000, 26 }
  , { 190000, 27 }
  , { 190000, 28 }
  , { 190000, 29 }
  , { 190000, 30 }
  , { 190000, 31 }
  , { 190000, 32 }
  , { 200000,  1 }
  , { 200000,  2 }
  , { 200000,  3 }
  , { 200000,  4 }
  , { 200000,  5 }
  , { 200000,  6 }
  , { 200000,  7 }
  , { 200000,  8 }
  , { 200000,  9 }
  , { 200000, 10 }
  , { 200000, 11 }
  , { 200000, 12 }
  , { 200000, 13 }
  , { 200000, 14 }
  , { 200000, 15 }
  , { 200000, 16 }
  , { 200000, 17 }
  , { 200000, 18 }
  , { 200000, 19 }
  , { 200000, 20 }
  , { 200000, 21 }
  , { 200000, 22 }
  , { 200000, 23 }
  , { 200000, 24 }
  , { 200000, 25 }
  , { 200000, 26 }
  , { 200000, 27 }
  , { 200000, 28 }
  , { 200000, 29 }
  , { 200000, 30 }
  , { 200000, 31 }
  , { 200000, 32 }

};

class BasicMinerTests : public ::testing::TestWithParam<TestParam>
{
protected:

  static constexpr uint32_t NUM_LANES  = 64;
  static constexpr std::size_t NUM_SLICES = 1024;
  static constexpr uint32_t NUM_LANES_MASK = NUM_LANES - 1;
  static constexpr uint32_t LOG2_NUM_LANES = Log2<NUM_LANES>::value;
  static constexpr std::size_t RANDOM_SEED = 42;

  static_assert(IsLog2<NUM_LANES>::value, "Number of lanes must be a valid 2 power");

  using Rng = std::mt19937_64;
  using BasicMiner = fetch::miner::BasicMiner;
  using BasicMinerPtr = std::unique_ptr<BasicMiner>;
  using MutableTransaction = fetch::chain::MutableTransaction;
  using VerifiedTransaction = fetch::chain::VerifiedTransaction;
  using BlockBody = fetch::chain::BlockBody;
  using Clock = std::chrono::high_resolution_clock;
  using Timepoint = Clock::time_point;
  using BitVector = fetch::bitmanip::BitVector;

  void SetUp() override
  {
    rng_.seed(RANDOM_SEED);
    miner_ = std::make_unique<BasicMiner>(uint32_t{LOG2_NUM_LANES}, std::size_t{NUM_SLICES});
  }

  void TearDown() override
  {
    miner_.reset();
  }

  void PopulateWithTransactions(std::size_t num_transactions)
  {
    std::poisson_distribution<uint32_t> dist(5.0);

    for (std::size_t i = 0; i < num_transactions; ++i)
    {
      uint32_t const num_resources = dist(rng_);

      MutableTransaction transaction;
      transaction.set_fee(rng_() & 0x3f);
      transaction.set_contract_name("ai.fetch.dummy");

      for (std::size_t j = 0; j < num_resources; ++j)
      {
        transaction.PushResource("Resource: " + std::to_string(rng_()));
      }

      // convert the transaction to a valid transaction
      auto tx = VerifiedTransaction::Create(std::move(transaction));
      miner_->EnqueueTransaction(tx.summary());
    }
  }

  Rng rng_;
  BasicMinerPtr miner_;
};

TEST_P(BasicMinerTests, Sample)
{
  TestParam const config = GetParam();

  Timepoint const pop = Clock::now();
  PopulateWithTransactions(config.num_tx);

  Timepoint const start = Clock::now();
  BlockBody block;
  miner_->SetTxPerThread(config.num_threads);
  miner_->GenerateBlock(block, NUM_LANES, NUM_SLICES);
  Timepoint const stop = Clock::now();

  std::size_t num_tx = 0;
  std::size_t total_fee = 0;
  std::size_t occupancy = 0;
  std::size_t i = 0;
  for (auto const &slice : block.slices)
  {
    BitVector lanes{NUM_LANES};

    num_tx += slice.transactions.size();

    for (auto const &tx : slice.transactions)
    {
      total_fee += tx.fee;

      BitVector resources{NUM_LANES};

      // update the resources array with the correct bits flags for the lanes
      for (auto const &resource : tx.resources)
      {
        // map the resource to a lane
        uint32_t const lane = fetch::miner::MapResourceToLane(resource, tx.contract_name, LOG2_NUM_LANES);

        // check the lane mapping
        resources.set(lane, 1);
      }

      // ensure there are not collisions
      BitVector collisions = resources & lanes;
      EXPECT_EQ(0, collisions.PopCount());

      lanes |= resources;
    }

    occupancy += lanes.PopCount();

    ++i;
  }

#if 1

  using std::chrono::duration_cast;
  using std::chrono::nanoseconds;

  std::ofstream statistics_file("stats.csv", std::ios::out | std::ios::app);

  if (statistics_file.tellp() == 0)
  {
    statistics_file << "Threads,Transactions,GenTime,PopTime,NumTx,Fee,Occupancy,Slices,Lanes" << std::endl;
  }

  statistics_file << config.num_threads
                  << ',' << config.num_tx
                  << ',' << duration_cast<nanoseconds>(stop - start).count()
                  << ',' << duration_cast<nanoseconds>(start - pop).count()
                  << ',' << num_tx
                  << ',' << total_fee
                  << ',' << occupancy
                  << ',' << NUM_SLICES
                  << ',' << NUM_LANES
                  << std::endl;
#endif
}

INSTANTIATE_TEST_CASE_P(ParamBased,
                        BasicMinerTests,
                        ::testing::ValuesIn(CONFIGS),);