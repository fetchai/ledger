syntax = "proto2";

package fetch.oef.pb;

import "query.proto";
import "fipa.proto";
import "dap_interface.proto";

message Agent {
    message CapabilityBits
    {
        optional bool will_heartbeat = 1;
    }

    message Server {
        message ID {
            required string public_key = 1;
        }       
        message Answer {
            optional string answer = 1;
            optional CapabilityBits capability_bits = 2;
        }
    }
    message Message {
        required int32 dialogue_id = 1;
        required string destination = 2;
        optional string target_uri = 101;
        optional string source_uri = 102;
        oneof payload {
            bytes content = 3;
            Fipa.Message fipa = 4;
        }
    }
}

message Server {
    message Phrase {
        message Failure {
        }
        oneof payload {
            string phrase = 1;
            Failure failure = 2;
        }
    }
    message Connected {
        required bool status = 1;
    }
    message SearchResult {
        repeated string agents = 1;
    }
    message SearchResultWide {
        message Item {
            message AgentInfo {
                required bytes key = 1;
                optional double score = 2;
                //later extra info about the agents (local search)
                //e.g. score (this would mean search system index dm by agent key)
            }

            optional bytes key = 1;
            optional string ip = 2;
            optional uint32 port = 3;
            optional string info = 4;
            optional double distance = 5;
            repeated AgentInfo agents = 6;
        }
        repeated Item result = 1;
    }

    message AgentMessage {
        message Content {
            required int32 dialogue_id = 1;
            required string origin = 2;
            oneof payload {
                  bytes content = 3;
                  Fipa.Message fipa = 4;
            }
        }
        message OEFError {
            enum Operation {
                REGISTER_SERVICE = 0;
                UNREGISTER_SERVICE = 1;

                SEARCH_SERVICES = 4;
                SEARCH_SERVICES_WIDE = 5;
                SEARCH_AGENTS = 6;
                SEND_MESSAGE = 7;

                OTHER = 10000;
            }
            required int32 operation = 1;
            optional string cause = 2;
            optional string detail = 3;
        }
        message CommsPing {
            optional int32 dummy = 1;
        }
        message DialogueError {
            required int32 dialogue_id = 1;
            required string origin = 2;
        }
        required int32 answer_id = 1;
        optional string target_uri = 101;
        optional string source_uri = 102;
        oneof payload {
            Content content = 2; // from agent
            OEFError oef_error = 3;   // from oef
            SearchResult agents = 4; // from oef
            SearchResultWide agents_wide = 5; // from oef
            DialogueError dialogue_error = 6;
            CommsPing ping = 7;
        }
    }
}

message AgentDescription {
    optional Query.Instance description = 1;
    optional Actions description_v2 = 2;

}

message AgentSearch {
    optional Query.Model query = 1;
    optional ConstructQueryObjectRequest query_v2 = 2;
}

message CommsPong {
    optional int32 dummy = 1;
}

message Envelope {
    message Nothing {}
    required int32 msg_id = 1;
    optional string agent_uri = 100;
    oneof payload {
        Agent.Message send_message = 2;
        AgentDescription register_service = 3;
        AgentDescription unregister_service = 4;
        AgentSearch search_services = 7;
        AgentSearch search_services_wide = 8;
        AgentSearch search_agents = 9;
        CommsPong pong = 10;
    }
}

message Data {
    required string name = 1;
    required string type = 2; // should be enum
    repeated string values = 3;
}

message Boolean {
    required bool status = 1;
}

message Transaction {
    required uint64 amount = 1;
}

// option optimize_for = LITE_RUNTIME;
option optimize_for = SPEED;
