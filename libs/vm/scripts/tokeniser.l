%option noyywrap nodefault reentrant bison-bridge
%option outfile="../src/tokeniser.cpp"
%option header-file="../include/vm/tokeniser.hpp"
%x COMMENT
%x SINGLELINECOMMENT
%x DOUBLEQUOTESTRING
%x SINGLEQUOTESTRING


%{

#include "vm/token.hpp"
#define YY_EXTRA_TYPE fetch::vm::Location*
#define YYSTYPE fetch::vm::Token

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wsign-compare"
#else
#pragma clang diagnostic ignored "-Wconversion"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wdeprecated-register"
#endif


int Set(fetch::vm::Token *token, fetch::vm::Token::Kind kind, char const *text,
    uint16_t length, fetch::vm::Location *location)
{
    token->kind = kind;
    token->offset = location->offset;
    token->line = location->line;
    token->text = text;
    location->offset += length;
    return 1;
}

void UpdateOffset(fetch::vm::Location *location, uint16_t length)
{
    location->offset += length;
}

bool UpdateLine(fetch::vm::Token *token, fetch::vm::Location *location)
{
    if (location->line != 0xFFFF)
    {
        ++location->line;
        return true;
    }
    Set(token, fetch::vm::Token::Kind::MaxLinesReached, "", 0, location);
    return false;
}

void UpdateText(fetch::vm::Token *token, char const *text, uint16_t length, fetch::vm::Location *location)
{
    token->text += text;
    location->offset += length;
}


%}


STR1            ([^"\\\n]|\\.)*
STR2            ([^'\\\n]|\\.)*
INT             0|[1-9][0-9]*
EXP             [Ee][+-]?{INT}
INTEGER_LITERAL {INT}{EXP}?
FP_LITERAL      {INT}\.[0-9]+
IDENT           [_a-zA-Z][_a-zA-Z0-9]*

%%

    /* whitespace */
[ \t\r]+ {
    UpdateOffset(yyextra, yyleng);
}
[\n] {
    if (!UpdateLine(yylval, yyextra))
    {
        return 0;
    }
    UpdateOffset(yyextra, yyleng);
}

    /* multi-line comments */
"/*" {
    Set(yylval, fetch::vm::Token::Kind::Unknown, yytext, yyleng, yyextra);
    BEGIN(COMMENT);
}
<COMMENT>\n {
    if (!UpdateLine(yylval, yyextra))
    {
        return 0;
    }
    UpdateOffset(yyextra, yyleng);
}
<COMMENT>[^*\n]+ {
    UpdateOffset(yyextra, yyleng);
}
<COMMENT>\**[^/\n] {
    UpdateOffset(yyextra, yyleng);
}
<COMMENT>\**"*/" {
    UpdateOffset(yyextra, yyleng);
    BEGIN(INITIAL);
}
<COMMENT><<EOF>> {
    yylval->kind = fetch::vm::Token::Kind::UnterminatedComment;
    return 0;
}

    /* single-line comments */
"//" {
    UpdateOffset(yyextra, yyleng);
    BEGIN(SINGLELINECOMMENT);
}
<SINGLELINECOMMENT>[^\n]+ {
    UpdateOffset(yyextra, yyleng);
}
<SINGLELINECOMMENT>\n {
    if (!UpdateLine(yylval, yyextra))
    {
        return 0;
    }
    UpdateOffset(yyextra, yyleng);
    BEGIN(INITIAL);
}
<SINGLELINECOMMENT><<EOF>> {
    Set(yylval, fetch::vm::Token::Kind::EndOfInput, "", 0, yyextra);
    return 0;
}

    /* numbers */

{INTEGER_LITERAL}i8 {
    return Set(yylval, fetch::vm::Token::Kind::Integer8, yytext, yyleng, yyextra);
}

{INTEGER_LITERAL}u8 {
    return Set(yylval, fetch::vm::Token::Kind::UnsignedInteger8, yytext, yyleng, yyextra);
}

{INTEGER_LITERAL}i16 {
    return Set(yylval, fetch::vm::Token::Kind::Integer16, yytext, yyleng, yyextra);
}

{INTEGER_LITERAL}u16 {
    return Set(yylval, fetch::vm::Token::Kind::UnsignedInteger16, yytext, yyleng, yyextra);
}

{INTEGER_LITERAL} |
{INTEGER_LITERAL}i32 {
    return Set(yylval, fetch::vm::Token::Kind::Integer32, yytext, yyleng, yyextra);
}

{INTEGER_LITERAL}u32 {
    return Set(yylval, fetch::vm::Token::Kind::UnsignedInteger32, yytext, yyleng, yyextra);
}

{INTEGER_LITERAL}i64 {
    return Set(yylval, fetch::vm::Token::Kind::Integer64, yytext, yyleng, yyextra);
}

{INTEGER_LITERAL}u64 {
    return Set(yylval, fetch::vm::Token::Kind::UnsignedInteger64, yytext, yyleng, yyextra);
}

{FP_LITERAL}fp32 |
{INT}fp32 {
    return Set(yylval, fetch::vm::Token::Kind::Fixed32, yytext, yyleng, yyextra);
}

{FP_LITERAL}fp64 |
{INT}fp64 {
    return Set(yylval, fetch::vm::Token::Kind::Fixed64, yytext, yyleng, yyextra);
}

{FP_LITERAL}fp128 |
{INT}fp128 {
    return Set(yylval, fetch::vm::Token::Kind::Fixed128, yytext, yyleng, yyextra);
}

    /* double-quote strings */
\" {
    Set(yylval, fetch::vm::Token::Kind::String, yytext, yyleng, yyextra);
    BEGIN(DOUBLEQUOTESTRING);
}
<DOUBLEQUOTESTRING>{STR1} {
    UpdateText(yylval, yytext, yyleng, yyextra);
}
<DOUBLEQUOTESTRING>\n {
    if (!UpdateLine(yylval, yyextra))
    {
        return 0;
    }
    UpdateOffset(yyextra, yyleng);
    yylval->kind = fetch::vm::Token::Kind::UnterminatedString;
    BEGIN(INITIAL);
    return 1;
}
<DOUBLEQUOTESTRING>\\ {
    // Need this rule to match <BACKSLASH><EOF> inside a string
    UpdateText(yylval, yytext, yyleng, yyextra);
    yylval->kind = fetch::vm::Token::Kind::UnterminatedString;
    BEGIN(INITIAL);
    return 1;
}
<DOUBLEQUOTESTRING><<EOF>> {
    yylval->kind = fetch::vm::Token::Kind::UnterminatedString;
    return 0;
}
<DOUBLEQUOTESTRING>\" {
    UpdateText(yylval, yytext, yyleng, yyextra);
    BEGIN(INITIAL);
    return 1;
}

    /* single-quote strings */
\' {
    Set(yylval, fetch::vm::Token::Kind::String, yytext, yyleng, yyextra);
    BEGIN(SINGLEQUOTESTRING);
}
<SINGLEQUOTESTRING>{STR2} {
    UpdateText(yylval, yytext, yyleng, yyextra);
}
<SINGLEQUOTESTRING>\n {
    if (!UpdateLine(yylval, yyextra))
    {
        return 0;
    }
    UpdateOffset(yyextra, yyleng);
    yylval->kind = fetch::vm::Token::Kind::UnterminatedString;
    BEGIN(INITIAL);
    return 1;
}
<SINGLEQUOTESTRING>\\ {
    // Need this rule to match <BACKSLASH><EOF> inside a string
    UpdateText(yylval, yytext, yyleng, yyextra);
    yylval->kind = fetch::vm::Token::Kind::UnterminatedString;
    BEGIN(INITIAL);
    return 1;
}
<SINGLEQUOTESTRING><<EOF>> {
    yylval->kind = fetch::vm::Token::Kind::UnterminatedString;
    return 0;
}
<SINGLEQUOTESTRING>\' {
    UpdateText(yylval, yytext, yyleng, yyextra);
    BEGIN(INITIAL);
    return 1;
}

    /* keywords */
"true"        {return Set(yylval, fetch::vm::Token::Kind::True, yytext, yyleng, yyextra);}
"false"       {return Set(yylval, fetch::vm::Token::Kind::False, yytext, yyleng, yyextra);}
"null"        {return Set(yylval, fetch::vm::Token::Kind::Null, yytext, yyleng, yyextra);}
"contract"    {return Set(yylval, fetch::vm::Token::Kind::Contract, yytext, yyleng, yyextra);}
"endcontract" {return Set(yylval, fetch::vm::Token::Kind::EndContract, yytext, yyleng, yyextra);}
"struct"      {return Set(yylval, fetch::vm::Token::Kind::Struct, yytext, yyleng, yyextra);}
"endstruct"   {return Set(yylval, fetch::vm::Token::Kind::EndStruct, yytext, yyleng, yyextra);}
"function"    {return Set(yylval, fetch::vm::Token::Kind::Function, yytext, yyleng, yyextra);}
"endfunction" {return Set(yylval, fetch::vm::Token::Kind::EndFunction, yytext, yyleng, yyextra);}
"while"       {return Set(yylval, fetch::vm::Token::Kind::While, yytext, yyleng, yyextra);}
"endwhile"    {return Set(yylval, fetch::vm::Token::Kind::EndWhile, yytext, yyleng, yyextra);}
"for"         {return Set(yylval, fetch::vm::Token::Kind::For, yytext, yyleng, yyextra);}
"in"          {return Set(yylval, fetch::vm::Token::Kind::In, yytext, yyleng, yyextra);}
"endfor"      {return Set(yylval, fetch::vm::Token::Kind::EndFor, yytext, yyleng, yyextra);}
"if"          {return Set(yylval, fetch::vm::Token::Kind::If, yytext, yyleng, yyextra);}
"elseif"      {return Set(yylval, fetch::vm::Token::Kind::ElseIf, yytext, yyleng, yyextra);}
"else"        {return Set(yylval, fetch::vm::Token::Kind::Else, yytext, yyleng, yyextra);}
"endif"       {return Set(yylval, fetch::vm::Token::Kind::EndIf, yytext, yyleng, yyextra);}
"var"         {return Set(yylval, fetch::vm::Token::Kind::Var, yytext, yyleng, yyextra);}
"return"      {return Set(yylval, fetch::vm::Token::Kind::Return, yytext, yyleng, yyextra);}
"break"       {return Set(yylval, fetch::vm::Token::Kind::Break, yytext, yyleng, yyextra);}
"continue"    {return Set(yylval, fetch::vm::Token::Kind::Continue, yytext, yyleng, yyextra);}
"persistent"  {return Set(yylval, fetch::vm::Token::Kind::Persistent, yytext, yyleng, yyextra);}
"use"         {return Set(yylval, fetch::vm::Token::Kind::Use, yytext, yyleng, yyextra);}
"as"          {return Set(yylval, fetch::vm::Token::Kind::As, yytext, yyleng, yyextra);}

    /* identifiers */
{IDENT} {
    return Set(yylval, fetch::vm::Token::Kind::Identifier, yytext, yyleng, yyextra);
}

    /* annotation identifiers */
@{IDENT} {
    return Set(yylval, fetch::vm::Token::Kind::AnnotationIdentifier, yytext, yyleng, yyextra);
}

    /*  punctuation and operators */
","   {return Set(yylval, fetch::vm::Token::Kind::Comma, yytext, yyleng, yyextra);}
"."   {return Set(yylval, fetch::vm::Token::Kind::Dot, yytext, yyleng, yyextra);}
":"   {return Set(yylval, fetch::vm::Token::Kind::Colon, yytext, yyleng, yyextra);}
";"   {return Set(yylval, fetch::vm::Token::Kind::SemiColon, yytext, yyleng, yyextra);}
"("   {return Set(yylval, fetch::vm::Token::Kind::LeftParenthesis, yytext, yyleng, yyextra);}
")"   {return Set(yylval, fetch::vm::Token::Kind::RightParenthesis, yytext, yyleng, yyextra);}
"["   {return Set(yylval, fetch::vm::Token::Kind::LeftSquareBracket, yytext, yyleng, yyextra);}
"]"   {return Set(yylval, fetch::vm::Token::Kind::RightSquareBracket, yytext, yyleng, yyextra);}
"{"   {return Set(yylval, fetch::vm::Token::Kind::LeftBrace, yytext, yyleng, yyextra);}
"}"   {return Set(yylval, fetch::vm::Token::Kind::RightBrace, yytext, yyleng, yyextra);}
"%"   {return Set(yylval, fetch::vm::Token::Kind::Modulo, yytext, yyleng, yyextra);}
"+"   {return Set(yylval, fetch::vm::Token::Kind::Plus, yytext, yyleng, yyextra);}
"-"   {return Set(yylval, fetch::vm::Token::Kind::Minus, yytext, yyleng, yyextra);}
"*"   {return Set(yylval, fetch::vm::Token::Kind::Multiply, yytext, yyleng, yyextra);}
"/"   {return Set(yylval, fetch::vm::Token::Kind::Divide, yytext, yyleng, yyextra);}
"%="  {return Set(yylval, fetch::vm::Token::Kind::InplaceModulo, yytext, yyleng, yyextra);}
"+="  {return Set(yylval, fetch::vm::Token::Kind::InplaceAdd, yytext, yyleng, yyextra);}
"-="  {return Set(yylval, fetch::vm::Token::Kind::InplaceSubtract, yytext, yyleng, yyextra);}
"*="  {return Set(yylval, fetch::vm::Token::Kind::InplaceMultiply, yytext, yyleng, yyextra);}
"/="  {return Set(yylval, fetch::vm::Token::Kind::InplaceDivide, yytext, yyleng, yyextra);}
"="   {return Set(yylval, fetch::vm::Token::Kind::Assign, yytext, yyleng, yyextra);}
"=="  {return Set(yylval, fetch::vm::Token::Kind::Equal, yytext, yyleng, yyextra);}
"!="  {return Set(yylval, fetch::vm::Token::Kind::NotEqual, yytext, yyleng, yyextra);}
"<"   {return Set(yylval, fetch::vm::Token::Kind::LessThan, yytext, yyleng, yyextra);}
"<="  {return Set(yylval, fetch::vm::Token::Kind::LessThanOrEqual, yytext, yyleng, yyextra);}
">"   {return Set(yylval, fetch::vm::Token::Kind::GreaterThan, yytext, yyleng, yyextra);}
">="  {return Set(yylval, fetch::vm::Token::Kind::GreaterThanOrEqual, yytext, yyleng, yyextra);}
"&&"  {return Set(yylval, fetch::vm::Token::Kind::And, yytext, yyleng, yyextra);}
"||"  {return Set(yylval, fetch::vm::Token::Kind::Or, yytext, yyleng, yyextra);}
"!"   {return Set(yylval, fetch::vm::Token::Kind::Not, yytext, yyleng, yyextra);}
"++"  {return Set(yylval, fetch::vm::Token::Kind::Inc, yytext, yyleng, yyextra);}
"--"  {return Set(yylval, fetch::vm::Token::Kind::Dec, yytext, yyleng, yyextra);}

<<EOF>> {
    Set(yylval, fetch::vm::Token::Kind::EndOfInput, "", 0, yyextra);
    return 0;
}

    /* catch-all for unrecognised */
. {
    return Set(yylval, fetch::vm::Token::Kind::Unknown, yytext, yyleng, yyextra);
}

%%
