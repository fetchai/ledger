#!/usr/bin/env python

import os
import sys
from distutils.core import setup, Extension

FILENAME = os.path.join("${CMAKE_CURRENT_BINARY_DIR}", "libfetchcore.cpp")
DIR = "${CMAKE_CURRENT_SOURCE_DIR}"
CORE_DIR = os.path.join(DIR, "libfetchcore/lib/")
EXTRA_ARGS = ["-L${CMAKE_CURRENT_BINARY_DIR}/"]
MACROS = [
    ('MAJOR_VERSION', '0'),
    ('MINOR_VERSION', '1')]


def amend_system_paths():
    sys.path = [CORE_DIR, os.path.join(DIR, "python")] + sys.path

    PYTHONPATH_PREFIX = DIR + ":" + CORE_DIR
    if 'PYTHONPATH' in os.environ:
        os.environ['PYTHONPATH'] = PYTHONPATH_PREFIX + \
            ":" + os.environ['PYTHONPATH']
    else:
        os.environ['PYTHONPATH'] = PYTHONPATH_PREFIX


def generate_module():
    from pybindgen import FileCodeSink, Module
    import libfetchcore
    core_module = Module("libfetchcore")
    libfetchcore.build(core_module)

    with open(FILENAME, "wt") as file_:
        core_module.generate(FileCodeSink(file_))


amend_system_paths()
generate_module()

python_module = Extension(
    'libfetchcore',
    sources=[FILENAME],
    include_dirs=[
        '/usr/local/include',
        os.path.join(DIR, "include"),
        os.path.join(DIR, "libfetchcore", "include"),
        os.path.join(DIR, "vendor", "asio", "asio", "include")],
    extra_compile_args=[
        '-std=c++11',
        '-msse4.2',
        '-v',
        '-DASIO_STANDALONE',
        '-DASIO_HEADER_ONLY',
        '-DASIO_HAS_STD_SYSTEM_ERROR'],
    extra_link_args=EXTRA_ARGS,
    define_macros=MACROS)

setup(name='libfetchcore',
      version='${PACKAGE_VERSION}',
      description='',
      author='Troels F. Roennow',
      author_email='troels.roennow@fetch.ai',
      ext_modules=[python_module])
